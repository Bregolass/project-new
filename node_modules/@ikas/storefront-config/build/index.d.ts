import { IkasCustomerReviewSettings, IkasCustomerSettings, IkasMerchantSettings, IkasProductBackInStockSettings, IkasSalesChannelPaymentGateway, IkasStorefontMetaTemplates, IkasStorefrontRouting, IkasThemeJsonFavicon, IkasThemeJsonStockPreference } from "@ikas/storefront-models";
export declare class IkasStorefrontConfig {
    private static themeId?;
    private static apiUrl?;
    private static cdnUrl?;
    private static apiKey?;
    private static customerToken?;
    private static storefrontId?;
    private static storefrontRoutingId?;
    private static priceListId?;
    private static stockLocationIds?;
    private static loginRequiredCallback?;
    private static domain?;
    private static storefrontThemeId?;
    private static salesChannelId?;
    private static routings;
    private static paymentGateways;
    private static gtmId?;
    private static fbpId?;
    private static analytics4Id?;
    private static universalAnalyticsId?;
    private static pickUpStockLocationIds?;
    private static tiktokPixelId?;
    private static favicon?;
    private static stockPreference?;
    private static translations;
    private static storefrontJSScripts;
    private static customerReviewSettings?;
    private static productBackInStockSettings?;
    private static merchantSettings?;
    private static currentPageComponents?;
    private static isEditor;
    private static customerSettings?;
    private static metaTemplates;
    private static custom?;
    private static sessionId?;
    private static visitorId?;
    private static observers;
    static addObserver(observer: IkasStorefrontConfigObserver): void;
    static init(config: Partial<IkasStorefrontConfigParams>): void;
    static initFromAPI(apiKey: string): Promise<void>;
    static getCurrentRouting(): IkasStorefrontRouting | undefined;
    static getCurrentLocale(): string;
    private static notify;
    static isCustomerReviewEnabled(): boolean;
    static isCustomerReviewLoginRequired(): boolean;
    static isBackInStockEnabled(): boolean;
    static isCustomerLoginRequiredForBackInStock(): boolean | null | undefined;
    static toJSON(): {};
    static getThemeId(): string | undefined;
    static getApiUrl(): string | undefined;
    static getCdnUrl(): string | undefined;
    static getApiKey(): string | undefined;
    static getCustomerToken(): string | undefined;
    static getStorefrontId(): string | undefined;
    static getStorefrontRoutingId(): string | undefined;
    static getPriceListId(): string | undefined;
    static getStockLocationIds(): string[] | undefined;
    static getLoginRequiredCallback(): LoginRequiredCallbackType | undefined;
    static getDomain(): string | undefined;
    static getStorefrontThemeId(): string | undefined;
    static getSalesChannelId(): string | undefined;
    static getRoutings(): IkasStorefrontRouting[];
    static getPaymentGateways(): IkasSalesChannelPaymentGateway[];
    static getGtmId(): string | undefined;
    static getFbpId(): string | undefined;
    static getAnalytics4Id(): string | undefined;
    static getUniversalAnalyticsId(): string | undefined;
    static getPickupStockLocationIds(): string[] | null | undefined;
    static getTiktokPixelId(): string | undefined;
    static getFavicon(): IkasThemeJsonFavicon | undefined;
    static getStockPreference(): IkasThemeJsonStockPreference | undefined;
    static getTranslations(): Record<string, any>;
    static getStorefrontJSScripts(): string[];
    static getCustomerReviewSettings(): IkasCustomerReviewSettings | null | undefined;
    static getProductBackInStockSettings(): IkasProductBackInStockSettings | null | undefined;
    static getMerchantSettings(): IkasMerchantSettings | null | undefined;
    static getCurrentPageComponents(): Record<string, any> | undefined;
    static getIsEditor(): boolean;
    static getSessionId(): string | undefined;
    static getVisitorId(): string | undefined;
    static getCustomerSettings(): IkasCustomerSettings | undefined;
    static getMetaTemplates(): IkasStorefontMetaTemplates[] | null;
    static getDefaultCurrencyCode(): string | null | undefined;
    static getDefaultCurrencySymbol(): string | null | undefined;
    static getCustom(): Record<string, any> | null | undefined;
}
export declare type IkasStorefrontConfigObserver = {
    id: string;
    callback: (config: IkasStorefrontConfig) => void;
};
export declare type LoginRequiredCallbackType = () => Promise<void> | void;
export declare type IkasStorefrontConfigParams = {
    themeId?: string;
    apiUrl?: string;
    cdnUrl?: string;
    apiKey?: string;
    token?: string;
    customerToken?: string;
    storefrontId?: string;
    storefrontRoutingId?: string;
    priceListId?: string;
    stockLocationIds?: string[];
    loginRequiredCallback?: LoginRequiredCallbackType;
    domain?: string;
    storefrontThemeId?: string;
    salesChannelId?: string;
    routings: IkasStorefrontRouting[];
    paymentGateways: IkasSalesChannelPaymentGateway[];
    gtmId?: string;
    fbpId?: string;
    analytics4Id?: string;
    universalAnalyticsId?: string;
    pickUpStockLocationIds?: string[] | null;
    tiktokPixelId?: string;
    favicon?: IkasThemeJsonFavicon;
    stockPreference?: IkasThemeJsonStockPreference;
    translations: Record<string, any>;
    storefrontJSScripts: string[];
    customerReviewSettings?: IkasCustomerReviewSettings | null;
    productBackInStockSettings?: IkasProductBackInStockSettings | null;
    merchantSettings?: IkasMerchantSettings | null;
    currentPageComponents?: Record<string, any>;
    isEditor: boolean;
    customerSettings?: IkasCustomerSettings;
    sessionId?: string;
    visitorId?: string;
    metaTemplates: IkasStorefontMetaTemplates[] | null;
    custom?: Record<string, any> | null;
};
