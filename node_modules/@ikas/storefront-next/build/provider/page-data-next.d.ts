/// <reference types="node" />
import { GetServerSidePropsContext, GetStaticPropsContext } from "next";
import { ParsedUrlQuery } from "querystring";
import { IkasCustomerReviewSettings, IkasCustomerSettings, IkasMerchantSettings, IkasProductBackInStockSettings, IkasSalesChannel, IkasStorefront, IkasStorefrontRouting, IkasStorefrontThemeLocalization, IkasThemeJson, IkasThemeJsonFavicon, IkasThemeJsonPageType, IkasThemeJsonSettings, IkasThemeJsonStockPreference } from "@ikas/storefront-models";
import { IkasPageDataProvider } from "@ikas/storefront-providers";
import { IkasStorefrontSettings } from "@ikas/storefront-api";
export declare class IkasNextPageDataProvider {
    static startTime: number;
    static readLocalTheme(): Promise<IkasThemeJson>;
    static readSettingsFile(): Promise<SettingsData | null>;
    static cacheLocalSettingsFile(settings: IkasStorefrontSettings): Promise<void>;
    static readLocalSettingsFile(): any;
    static getLocalSettings(locale: string): Promise<SettingsData | null>;
    static getProdSettings(locale: string): Promise<SettingsData | null>;
    static getSettings(locale: string): Promise<SettingsData | null>;
    static setStorefrontConfig(settings: SettingsData): Promise<void>;
    static setTranslations(settings: SettingsData, componentIds: string[], pageType?: IkasThemeJsonPageType, isEditor?: boolean, contextLocale?: string): Promise<void>;
    static getExtraProps(settings: SettingsData, provider: IkasPageDataProvider, pageType?: IkasThemeJsonPageType): Promise<Record<string, any>>;
    static getPageData(context: GetStaticPropsContext<ParsedUrlQuery> | GetServerSidePropsContext<ParsedUrlQuery>, isServer: boolean, pageType?: IkasThemeJsonPageType, possiblePageTypes?: IkasThemeJsonPageType[], isEditor?: boolean): Promise<{
        props: {};
        notFound: boolean;
        revalidate?: undefined;
    } | {
        props: any;
        notFound?: undefined;
        revalidate?: undefined;
    } | {
        props: any;
        revalidate: number;
        notFound?: undefined;
    }>;
    static getStaticProps(context: GetStaticPropsContext<ParsedUrlQuery>, pageType?: IkasThemeJsonPageType, possiblePageTypes?: IkasThemeJsonPageType[], isEditor?: boolean): Promise<{
        props: {};
        notFound: boolean;
        revalidate?: undefined;
    } | {
        props: any;
        notFound?: undefined;
        revalidate?: undefined;
    } | {
        props: any;
        revalidate: number;
        notFound?: undefined;
    }>;
    static getServerSideProps(context: GetServerSidePropsContext<ParsedUrlQuery>, pageType?: IkasThemeJsonPageType): Promise<{
        props: {};
        notFound: boolean;
        revalidate?: undefined;
    } | {
        props: any;
        notFound?: undefined;
        revalidate?: undefined;
    } | {
        props: any;
        revalidate: number;
        notFound?: undefined;
    }>;
    static createColorScript(settings: IkasThemeJsonSettings): string | undefined;
    static createFontScript(settings: IkasThemeJsonSettings): Promise<string | undefined>;
}
export declare type SettingsData = {
    storefront: IkasStorefront;
    themeLocalization: IkasStorefrontThemeLocalization;
    salesChannel: IkasSalesChannel;
    routing: IkasStorefrontRouting;
    localizationMap?: Record<string, any>;
    favicon: IkasThemeJsonFavicon;
    stockPreference: IkasThemeJsonStockPreference;
    storefrontJSScripts: string[];
    domain: string;
    productBackInStockSettings: IkasProductBackInStockSettings | null;
    customerReviewSettings: IkasCustomerReviewSettings | null;
    merchantSettings: IkasMerchantSettings;
    customerSettings?: IkasCustomerSettings;
    custom?: Record<string, any> | null;
};
export declare type IkasCheckoutCustomizationProps = {
    showTax?: boolean;
    buttonBgColor?: string;
    buttonTextColor?: string;
    buttonDisabledBgColor?: string;
    buttonDisabledTextColor?: string;
    primaryTextColor?: string;
    secondaryTextColor?: string;
    primaryBgColor?: string;
    secondaryBgColor?: string;
    borderColor?: string;
    cardBgColor?: string;
    errorColor?: string;
    errorLightColor?: string;
    warningColor?: string;
    warningLightColor?: string;
    successColor?: string;
    successLightColor?: string;
};
