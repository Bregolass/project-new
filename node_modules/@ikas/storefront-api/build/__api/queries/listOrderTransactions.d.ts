import { ConfigType, APIResponse } from "@ikas/fe-api-client";
import { StringFilterInput, StorefrontTransaction } from "../types";
declare const listOrderTransactions: (variables: QueryParams, fields?: string[], config?: ConfigType) => Promise<APIResponse<StorefrontTransaction[]> | APIResponse<undefined>>;
export default listOrderTransactions;
export declare type QueryParams = {
    checkoutId?: StringFilterInput | null;
    id?: StringFilterInput | null;
    orderId?: StringFilterInput | null;
};
export declare enum ResponseField {
    AMOUNT = "amount",
    CHECKOUT_ID = "checkoutId",
    CREATED_AT = "createdAt",
    CURRENCY_CODE = "currencyCode",
    CURRENCY_SYMBOL = "currencySymbol",
    CUSTOMER_ID = "customerId",
    DELETED = "deleted",
    ERROR__CODE = "error.code",
    ERROR__DECLINE_CODE = "error.declineCode",
    ERROR__MESSAGE = "error.message",
    ID = "id",
    ORDER_ID = "orderId",
    PAYMENT_GATEWAY_CODE = "paymentGatewayCode",
    PAYMENT_GATEWAY_ID = "paymentGatewayId",
    PAYMENT_GATEWAY_NAME = "paymentGatewayName",
    PAYMENT_METHOD = "paymentMethod",
    PAYMENT_METHOD_DETAIL__BANK_NAME = "paymentMethodDetail.bankName",
    PAYMENT_METHOD_DETAIL__BIN_NUMBER = "paymentMethodDetail.binNumber",
    PAYMENT_METHOD_DETAIL__CARD_ASSOCIATION = "paymentMethodDetail.cardAssociation",
    PAYMENT_METHOD_DETAIL__CARD_FAMILY = "paymentMethodDetail.cardFamily",
    PAYMENT_METHOD_DETAIL__CARD_TYPE = "paymentMethodDetail.cardType",
    PAYMENT_METHOD_DETAIL__INSTALLMENT__INSTALLMENT_COUNT = "paymentMethodDetail.installment.installmentCount",
    PAYMENT_METHOD_DETAIL__INSTALLMENT__INSTALLMENT_PRICE = "paymentMethodDetail.installment.installmentPrice",
    PAYMENT_METHOD_DETAIL__INSTALLMENT__ORIGINAL_RATE = "paymentMethodDetail.installment.originalRate",
    PAYMENT_METHOD_DETAIL__INSTALLMENT__RATE = "paymentMethodDetail.installment.rate",
    PAYMENT_METHOD_DETAIL__INSTALLMENT__TOTAL_PRICE = "paymentMethodDetail.installment.totalPrice",
    PAYMENT_METHOD_DETAIL__LAST_FOUR_DIGITS = "paymentMethodDetail.lastFourDigits",
    PAYMENT_METHOD_DETAIL__PAYMENT_METHOD_NAME = "paymentMethodDetail.paymentMethodName",
    PAYMENT_METHOD_DETAIL__THREE_D_SECURE = "paymentMethodDetail.threeDSecure",
    PROCESSED_AT = "processedAt",
    REFUND_REASON = "refundReason",
    STATUS = "status",
    TYPE = "type",
    UPDATED_AT = "updatedAt"
}
