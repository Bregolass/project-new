import { ConfigType, APIResponse } from "@ikas/fe-api-client";
import { GetProductCampaignsInput, GetProductCampaignsResponse } from "../types";
declare const getProductCampaigns: (variables: QueryParams, fields?: string[], config?: ConfigType) => Promise<APIResponse<GetProductCampaignsResponse[]> | APIResponse<undefined>>;
export default getProductCampaigns;
export declare type QueryParams = {
    input: GetProductCampaignsInput;
};
export declare enum ResponseField {
    CAMPAIGN__APPLICABLE_CUSTOMER_GROUP_IDS = "campaign.applicableCustomerGroupIds",
    CAMPAIGN__APPLICABLE_CUSTOMER_IDS = "campaign.applicableCustomerIds",
    CAMPAIGN__APPLICABLE_PRICE = "campaign.applicablePrice",
    CAMPAIGN__BUY_X_THEN_GET_Y__BUY_X__AMOUNT = "campaign.buyXThenGetY.buyX.amount",
    CAMPAIGN__BUY_X_THEN_GET_Y__BUY_X__APPLY_BY_QUANTITY = "campaign.buyXThenGetY.buyX.applyByQuantity",
    CAMPAIGN__BUY_X_THEN_GET_Y__BUY_X__FILTER__ID_LIST = "campaign.buyXThenGetY.buyX.filter.idList",
    CAMPAIGN__BUY_X_THEN_GET_Y__BUY_X__FILTER__TYPE = "campaign.buyXThenGetY.buyX.filter.type",
    CAMPAIGN__BUY_X_THEN_GET_Y__GET_Y__AMOUNT = "campaign.buyXThenGetY.getY.amount",
    CAMPAIGN__BUY_X_THEN_GET_Y__GET_Y__AUTOMATICALLY_ADD_ITEM_TO_CART = "campaign.buyXThenGetY.getY.automaticallyAddItemToCart",
    CAMPAIGN__BUY_X_THEN_GET_Y__GET_Y__DISCOUNT_RATIO = "campaign.buyXThenGetY.getY.discountRatio",
    CAMPAIGN__BUY_X_THEN_GET_Y__GET_Y__FILTER__ID_LIST = "campaign.buyXThenGetY.getY.filter.idList",
    CAMPAIGN__BUY_X_THEN_GET_Y__GET_Y__FILTER__TYPE = "campaign.buyXThenGetY.getY.filter.type",
    CAMPAIGN__BUY_X_THEN_GET_Y__MAX_USAGE_PER_ORDER = "campaign.buyXThenGetY.maxUsagePerOrder",
    CAMPAIGN__CAN_COMBINE_WITH_OTHER_CAMPAIGNS = "campaign.canCombineWithOtherCampaigns",
    CAMPAIGN__CREATED_AT = "campaign.createdAt",
    CAMPAIGN__CREATED_FOR = "campaign.createdFor",
    CAMPAIGN__CURRENCY_CODES = "campaign.currencyCodes",
    CAMPAIGN__DATE_RANGE__END = "campaign.dateRange.end",
    CAMPAIGN__DATE_RANGE__START = "campaign.dateRange.start",
    CAMPAIGN__DELETED = "campaign.deleted",
    CAMPAIGN__FIXED_DISCOUNT__AMOUNT = "campaign.fixedDiscount.amount",
    CAMPAIGN__FIXED_DISCOUNT__FILTERS__ID_LIST = "campaign.fixedDiscount.filters.idList",
    CAMPAIGN__FIXED_DISCOUNT__FILTERS__TYPE = "campaign.fixedDiscount.filters.type",
    CAMPAIGN__FIXED_DISCOUNT__LINE_ITEM_QUANTITY_RANGE__MAX = "campaign.fixedDiscount.lineItemQuantityRange.max",
    CAMPAIGN__FIXED_DISCOUNT__LINE_ITEM_QUANTITY_RANGE__MIN = "campaign.fixedDiscount.lineItemQuantityRange.min",
    CAMPAIGN__FIXED_DISCOUNT__PRICE_RANGE__MAX = "campaign.fixedDiscount.priceRange.max",
    CAMPAIGN__FIXED_DISCOUNT__PRICE_RANGE__MIN = "campaign.fixedDiscount.priceRange.min",
    CAMPAIGN__HAS_COUPON = "campaign.hasCoupon",
    CAMPAIGN__ID = "campaign.id",
    CAMPAIGN__INCLUDE_DISCOUNTED_PRODUCTS = "campaign.includeDiscountedProducts",
    CAMPAIGN__IS_FREE_SHIPPING = "campaign.isFreeShipping",
    CAMPAIGN__ONLY_USE_CUSTOMER = "campaign.onlyUseCustomer",
    CAMPAIGN__SALES_CHANNEL_IDS = "campaign.salesChannelIds",
    CAMPAIGN__TITLE = "campaign.title",
    CAMPAIGN__TYPE = "campaign.type",
    CAMPAIGN__UPDATED_AT = "campaign.updatedAt",
    CAMPAIGN__USAGE_COUNT = "campaign.usageCount",
    CAMPAIGN__USAGE_LIMIT = "campaign.usageLimit",
    CAMPAIGN__USAGE_LIMIT_PER_CUSTOMER = "campaign.usageLimitPerCustomer",
    VARIANT_IDS = "variantIds"
}
