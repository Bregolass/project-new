import { ConfigType, APIResponse } from "@ikas/fe-api-client";
import { StringFilterInput, CampaignOffer } from "../types";
declare const listCampaignOffer: (variables: QueryParams, fields?: string[], config?: ConfigType) => Promise<APIResponse<undefined> | APIResponse<CampaignOffer[]>>;
export default listCampaignOffer;
export declare type QueryParams = {
    id?: StringFilterInput | null;
};
export declare enum ResponseField {
    AVAILABLE_SALES_CHANNEL_IDS = "availableSalesChannelIds",
    CREATED_AT = "createdAt",
    CURRENCY_CODES = "currencyCodes",
    DELETED = "deleted",
    END_DATE = "endDate",
    FOLLOW_UP_ACTION_TYPE = "followUpActionType",
    ID = "id",
    MINIMUM_REQUIRED_CART_AMOUNT = "minimumRequiredCartAmount",
    NAME = "name",
    OFFERS__APPLICABLE_PRICE = "offers.applicablePrice",
    OFFERS__COUNTDOWN_MINUTES = "offers.countdownMinutes",
    OFFERS__DESCRIPTION = "offers.description",
    OFFERS__DISCOUNT_AMOUNT = "offers.discountAmount",
    OFFERS__DISCOUNT_TYPE = "offers.discountType",
    OFFERS__EXCLUDED_VARIANT_ID_LIST = "offers.excludedVariantIdList",
    OFFERS__ID = "offers.id",
    OFFERS__ORDER = "offers.order",
    OFFERS__PRODUCT_ID = "offers.productId",
    OFFERS__SHOW_CRITERIA = "offers.showCriteria",
    OFFERS__SKIP_OFFER_IF_PRODUCT_EXISTS_IN_CART = "offers.skipOfferIfProductExistsInCart",
    OFFERS__TITLE = "offers.title",
    OFFERS__TRANSLATIONS__DESCRIPTION = "offers.translations.description",
    OFFERS__TRANSLATIONS__LOCALE = "offers.translations.locale",
    OFFERS__TRANSLATIONS__TITLE = "offers.translations.title",
    START_DATE = "startDate",
    TARGET_PAGE_TYPES = "targetPageTypes",
    TRIGGER_SETTINGS__FILTER_TYPE = "triggerSettings.filterType",
    TRIGGER_SETTINGS__VALUE_LIST = "triggerSettings.valueList",
    TYPE = "type",
    UPDATED_AT = "updatedAt"
}
