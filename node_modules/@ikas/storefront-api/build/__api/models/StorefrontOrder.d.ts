import { DeepReadonly } from "ts-essentials";
import BaseModelData from "./_base";
import { OrderCancelledReasonEnum, OrderPackageStatusEnum, OrderPaymentStatusEnum, OrderShippingMethodEnum, OrderStatusEnum } from "../types";
import { OrderAddressData } from "./OrderAddress";
import { OrderCurrencyRateData } from "./OrderCurrencyRate";
import { OrderCustomerData } from "./OrderCustomer";
import { OrderGiftPackageLineData } from "./OrderGiftPackageLine";
import { InvoiceData } from "./Invoice";
import { OrderAdjustmentData } from "./OrderAdjustment";
import { OrderLineItemData } from "./OrderLineItem";
import { OrderPackageData } from "./OrderPackage";
import { OrderPaymentMethodData } from "./OrderPaymentMethod";
import { OrderShippingLineData } from "./OrderShippingLine";
import { OrderTaxLineData } from "./OrderTaxLine";
export declare class StorefrontOrderData extends BaseModelData {
    billingAddress: OrderAddressData | null;
    cancelReason: OrderCancelledReasonEnum | null;
    cancelledAt: any | null;
    currencyCode: string;
    currencyRates: OrderCurrencyRateData[];
    currencySymbol: string | null;
    customer: OrderCustomerData | null;
    customerId: string | null;
    giftPackageLines: OrderGiftPackageLineData[] | null;
    giftPackageNote: string | null;
    invoices: InvoiceData[] | null;
    isGiftPackage: boolean | null;
    merchantId: string;
    note: string | null;
    orderAdjustments: OrderAdjustmentData[] | null;
    orderLineItems: OrderLineItemData[];
    orderNumber: string | null;
    orderPackageStatus: OrderPackageStatusEnum | null;
    orderPackages: OrderPackageData[] | null;
    orderPaymentStatus: OrderPaymentStatusEnum | null;
    orderTagIds: string[] | null;
    orderedAt: any | null;
    paymentMethods: OrderPaymentMethodData[] | null;
    shippingAddress: OrderAddressData | null;
    shippingLines: OrderShippingLineData[] | null;
    shippingMethod: OrderShippingMethodEnum;
    status: OrderStatusEnum;
    taxLines: OrderTaxLineData[] | null;
    totalFinalPrice: number;
    totalPrice: number;
    constructor(data?: Partial<StorefrontOrderData>);
}
export declare class StorefrontOrder extends StorefrontOrderData {
}
export declare type PartialStorefrontOrder = Partial<StorefrontOrder>;
export declare type ReadOnlyStorefrontOrder = DeepReadonly<StorefrontOrder>;
