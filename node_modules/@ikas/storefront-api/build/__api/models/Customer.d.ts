import { DeepReadonly } from "ts-essentials";
import BaseModelData from "./_base";
import { CustomerAccountStatusEnum, CustomerRegistrationSourceEnum, CustomerEmailSubscriptionStatusesEnum } from "../types";
import { CustomerAddressData } from "./CustomerAddress";
import { CustomerAttributeValueData } from "./CustomerAttributeValue";
export declare class CustomerData extends BaseModelData {
    accountStatus: CustomerAccountStatusEnum | null;
    accountStatusUpdatedAt: any | null;
    addresses: CustomerAddressData[] | null;
    attributes: CustomerAttributeValueData[] | null;
    customerGroupIds: string[] | null;
    customerSequence: number | null;
    email: string | null;
    emailVerifiedDate: any | null;
    firstName: string;
    fullName: string | null;
    isEmailVerified: boolean | null;
    isPhoneVerified: boolean | null;
    lastName: string | null;
    note: string | null;
    orderCount: number | null;
    passwordUpdateDate: any | null;
    phone: string | null;
    phoneVerifiedDate: any | null;
    preferredLanguage: string | null;
    registrationSource: CustomerRegistrationSourceEnum | null;
    subscriptionStatus: CustomerEmailSubscriptionStatusesEnum | null;
    subscriptionStatusUpdatedAt: any | null;
    tagIds: string[] | null;
    constructor(data?: Partial<CustomerData>);
}
export declare class Customer extends CustomerData {
}
export declare type PartialCustomer = Partial<Customer>;
export declare type ReadOnlyCustomer = DeepReadonly<Customer>;
