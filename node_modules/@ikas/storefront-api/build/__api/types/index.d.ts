export declare enum AbandonedCartSettingsNotificationTypeEnum {
    EMAIL = "EMAIL",
    SMS = "SMS"
}
export declare enum BlogMetadataTargetTypeEnum {
    BLOG = "BLOG",
    BLOG_CATEGORY = "BLOG_CATEGORY"
}
export declare enum CampaignApplicablePriceEnum {
    DISCOUNT_PRICE = "DISCOUNT_PRICE",
    SELL_PRICE = "SELL_PRICE"
}
export declare enum CampaignCreatedForEnum {
    ABANDONED_CHECKOUT = "ABANDONED_CHECKOUT",
    CART = "CART",
    CUSTOMER_REVIEW = "CUSTOMER_REVIEW"
}
export declare enum CampaignFilterTypeEnum {
    CATEGORY = "CATEGORY",
    PRODUCT = "PRODUCT",
    PRODUCT_BRAND = "PRODUCT_BRAND",
    PRODUCT_TAG = "PRODUCT_TAG",
    VARIANT = "VARIANT"
}
export declare enum CampaignOfferFollowUpActionTypeEnum {
    DO_NOTHING = "DO_NOTHING",
    OPEN_CART = "OPEN_CART",
    OPEN_CHECKOUT = "OPEN_CHECKOUT"
}
export declare enum CampaignOfferProductApplicablePriceEnum {
    DISCOUNT_PRICE = "DISCOUNT_PRICE",
    SELL_PRICE = "SELL_PRICE"
}
export declare enum CampaignOfferProductShowCriteriaEnum {
    PREVIOUS_ACCEPTED = "PREVIOUS_ACCEPTED",
    PREVIOUS_REJECTED = "PREVIOUS_REJECTED"
}
export declare enum CampaignOfferTargetPageTypeEnum {
    CHECKOUT = "CHECKOUT",
    POST_CHECKOUT = "POST_CHECKOUT"
}
export declare enum CampaignOfferTriggerFilterTypeEnum {
    ALL_PRODUCTS = "ALL_PRODUCTS",
    CATEGORY = "CATEGORY",
    MIN_CART_AMOUNT = "MIN_CART_AMOUNT",
    PRODUCT = "PRODUCT",
    PRODUCT_TAG = "PRODUCT_TAG",
    VARIANT = "VARIANT"
}
export declare enum CampaignOfferTypeEnum {
    CROSS_SELL = "CROSS_SELL",
    UPSELL = "UPSELL"
}
export declare enum CampaignTypeEnum {
    BUY_X_THEN_GET_Y = "BUY_X_THEN_GET_Y",
    FIXED_AMOUNT = "FIXED_AMOUNT",
    FREE_SHIPPING = "FREE_SHIPPING",
    RATIO = "RATIO"
}
export declare enum CartCampaignOfferStatus {
    ACCEPTED = "ACCEPTED",
    REJECTED = "REJECTED",
    REMOVED = "REMOVED",
    WAITING_FOR_ACTION = "WAITING_FOR_ACTION"
}
export declare enum CartCreatedByEnum {
    ADMIN = "ADMIN",
    CUSTOMER = "CUSTOMER"
}
export declare enum CartStatusEnum {
    ACTIVE = "ACTIVE",
    FREEZE = "FREEZE",
    PASSIVE = "PASSIVE"
}
export declare enum CartV2StatusEnum {
    COMPLETED = "COMPLETED",
    FREEZE = "FREEZE",
    KILLED = "KILLED",
    OPEN = "OPEN"
}
export declare enum CategoryConditionTypeEnum {
    CAMPAIGN = "CAMPAIGN",
    CREATED_AT = "CREATED_AT",
    DISCOUNTED_PRODUCTS = "DISCOUNTED_PRODUCTS",
    PRICE_RANGE = "PRICE_RANGE",
    PRODUCT_BRAND = "PRODUCT_BRAND",
    PRODUCT_TAG = "PRODUCT_TAG",
    VARIANT_VALUE = "VARIANT_VALUE"
}
export declare enum CategoryProductsOrderTypeEnum {
    BEST_SELLER = "BEST_SELLER",
    HIGHEST_DISCOUNT_RATIO = "HIGHEST_DISCOUNT_RATIO",
    HIGHEST_PRICE = "HIGHEST_PRICE",
    LOWEST_DISCOUNT_RATIO = "LOWEST_DISCOUNT_RATIO",
    LOWEST_PRICE = "LOWEST_PRICE",
    MANUALLY = "MANUALLY",
    NEWEST = "NEWEST",
    OLDEST = "OLDEST"
}
export declare enum CheckoutRecoveryEmailStatusEnum {
    NOT_SENT = "NOT_SENT",
    SENT = "SENT"
}
export declare enum CheckoutRecoveryStatusEnum {
    NOT_RECOVERED = "NOT_RECOVERED",
    RECOVERED = "RECOVERED"
}
export declare enum CheckoutRequirementEnum {
    INVISIBLE = "INVISIBLE",
    MANDATORY = "MANDATORY",
    OPTIONAL = "OPTIONAL"
}
export declare enum CheckoutStatusEnum {
    COMPLETED = "COMPLETED",
    FREEZE = "FREEZE",
    KILLED = "KILLED",
    OPEN = "OPEN"
}
export declare enum CurrencyFormatSymbolPosition {
    LEFT = "LEFT",
    RIGHT = "RIGHT"
}
export declare enum CustomerAccountStatusEnum {
    ACTIVE_ACCOUNT = "ACTIVE_ACCOUNT",
    DECLINED_ACCOUNT_INVITATION = "DECLINED_ACCOUNT_INVITATION",
    DISABLED_ACCOUNT = "DISABLED_ACCOUNT",
    INVITED_TO_CREATE_ACCOUNT = "INVITED_TO_CREATE_ACCOUNT"
}
export declare enum CustomerAttributePermissionEnum {
    INVISIBLE = "INVISIBLE",
    READ = "READ",
    WRITE = "WRITE"
}
export declare enum CustomerAttributeRegisterPageRequirementEnum {
    INVISIBLE = "INVISIBLE",
    MANDATORY = "MANDATORY",
    OPTIONAL = "OPTIONAL"
}
export declare enum CustomerAttributeTypeEnum {
    BOOLEAN = "BOOLEAN",
    CHOICE = "CHOICE",
    DATETIME = "DATETIME",
    MULTIPLE_CHOICE = "MULTIPLE_CHOICE",
    NUMERIC = "NUMERIC",
    TEXT = "TEXT"
}
export declare enum CustomerEmailSubscriptionStatusesEnum {
    NOT_SUBSCRIBED = "NOT_SUBSCRIBED",
    PENDING_CONFIRMATION = "PENDING_CONFIRMATION",
    SUBSCRIBED = "SUBSCRIBED"
}
export declare enum CustomerRegistrationSourceEnum {
    credentials = "credentials",
    facebook = "facebook",
    google = "google"
}
export declare enum CustomerReviewStatusEnum {
    APPROVED = "APPROVED",
    REJECTED = "REJECTED",
    WAITING = "WAITING"
}
export declare enum CustomerSocialLoginProviderEnum {
    facebook = "facebook",
    google = "google"
}
export declare enum GetSuggestedProductsMethodEnum {
    SAMPLING = "SAMPLING",
    VIEWED_TOGETHER = "VIEWED_TOGETHER"
}
export declare enum HTMLMetaDataTargetTypeEnum {
    BRAND = "BRAND",
    CATEGORY = "CATEGORY",
    PAGE = "PAGE",
    PRODUCT = "PRODUCT"
}
export declare enum InvoiceTypeEnum {
    COMPANY = "COMPANY",
    INDIVIDUAL = "INDIVIDUAL",
    OTHER = "OTHER"
}
export declare enum MasterPassOperationTypeEnum {
    CHECK_MASTER_PASS_USER = "CHECK_MASTER_PASS_USER",
    DELETE_CARD = "DELETE_CARD",
    DIRECT_PURCHASE = "DIRECT_PURCHASE",
    FORGOT_PASSWORD = "FORGOT_PASSWORD",
    LIST_CARDS = "LIST_CARDS",
    PURCHASE = "PURCHASE",
    REGISTER_CARD = "REGISTER_CARD"
}
export declare enum MerchantSettingsAddressTypeEnum {
    CORPORATE = "CORPORATE",
    INDIVIDUAL = "INDIVIDUAL"
}
export declare enum OrderAdjustmentEnum {
    DECREMENT = "DECREMENT",
    INCREMENT = "INCREMENT"
}
export declare enum OrderAmountTypeEnum {
    AMOUNT = "AMOUNT",
    RATIO = "RATIO"
}
export declare enum OrderCancelledReasonEnum {
    CUSTOMER = "CUSTOMER",
    DECLINED = "DECLINED",
    INVENTORY = "INVENTORY",
    OTHER = "OTHER"
}
export declare enum OrderLineItemStatusEnum {
    CANCELLED = "CANCELLED",
    CANCEL_REJECTED = "CANCEL_REJECTED",
    CANCEL_REQUESTED = "CANCEL_REQUESTED",
    DELIVERED = "DELIVERED",
    FULFILLED = "FULFILLED",
    REFUNDED = "REFUNDED",
    REFUND_REJECTED = "REFUND_REJECTED",
    REFUND_REQUESTED = "REFUND_REQUESTED",
    REFUND_REQUEST_ACCEPTED = "REFUND_REQUEST_ACCEPTED",
    UNFULFILLED = "UNFULFILLED"
}
export declare enum OrderPackageFulfillStatusEnum {
    CANCELLED = "CANCELLED",
    CANCEL_REJECTED = "CANCEL_REJECTED",
    CANCEL_REQUESTED = "CANCEL_REQUESTED",
    DELIVERED = "DELIVERED",
    ERROR = "ERROR",
    FULFILLED = "FULFILLED",
    READY_FOR_PICK_UP = "READY_FOR_PICK_UP",
    READY_FOR_SHIPMENT = "READY_FOR_SHIPMENT",
    REFUNDED = "REFUNDED",
    REFUND_REJECTED = "REFUND_REJECTED",
    REFUND_REQUESTED = "REFUND_REQUESTED",
    REFUND_REQUEST_ACCEPTED = "REFUND_REQUEST_ACCEPTED",
    UNABLE_TO_DELIVER = "UNABLE_TO_DELIVER"
}
export declare enum OrderPackageStatusEnum {
    CANCELLED = "CANCELLED",
    CANCEL_REJECTED = "CANCEL_REJECTED",
    CANCEL_REQUESTED = "CANCEL_REQUESTED",
    DELIVERED = "DELIVERED",
    FULFILLED = "FULFILLED",
    PARTIALLY_CANCELLED = "PARTIALLY_CANCELLED",
    PARTIALLY_DELIVERED = "PARTIALLY_DELIVERED",
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED",
    PARTIALLY_READY_FOR_SHIPMENT = "PARTIALLY_READY_FOR_SHIPMENT",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    READY_FOR_PICK_UP = "READY_FOR_PICK_UP",
    READY_FOR_SHIPMENT = "READY_FOR_SHIPMENT",
    REFUNDED = "REFUNDED",
    REFUND_REJECTED = "REFUND_REJECTED",
    REFUND_REQUESTED = "REFUND_REQUESTED",
    REFUND_REQUEST_ACCEPTED = "REFUND_REQUEST_ACCEPTED",
    UNABLE_TO_DELIVER = "UNABLE_TO_DELIVER",
    UNFULFILLED = "UNFULFILLED"
}
export declare enum OrderPaymentStatusEnum {
    PAID = "PAID",
    PARTIALLY_PAID = "PARTIALLY_PAID",
    WAITING = "WAITING"
}
export declare enum OrderShippingMethodEnum {
    CLICK_AND_COLLECT = "CLICK_AND_COLLECT",
    DIGITAL_DELIVERY = "DIGITAL_DELIVERY",
    NO_SHIPMENT = "NO_SHIPMENT",
    SHIPMENT = "SHIPMENT"
}
export declare enum OrderStatusEnum {
    CANCELLED = "CANCELLED",
    CREATED = "CREATED",
    DRAFT = "DRAFT",
    PARTIALLY_CANCELLED = "PARTIALLY_CANCELLED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    REFUNDED = "REFUNDED",
    REFUND_REJECTED = "REFUND_REJECTED",
    REFUND_REQUESTED = "REFUND_REQUESTED"
}
export declare enum PaymentGatewayAdditionalPriceTypeEnum {
    DECREMENT = "DECREMENT",
    INCREMENT = "INCREMENT"
}
export declare enum PaymentGatewaySettingsTypeEnum {
    BOOLEAN = "BOOLEAN",
    NUMBER = "NUMBER",
    PASSWORD = "PASSWORD",
    TEXT = "TEXT"
}
export declare enum PaymentGatewayTransactionFeeTypeEnum {
    AMOUNT = "AMOUNT",
    RATIO = "RATIO"
}
export declare enum PaymentGatewayTypeEnum {
    EXTERNAL = "EXTERNAL",
    INTERNAL = "INTERNAL",
    THIRD_PARTY = "THIRD_PARTY"
}
export declare enum PaymentMethodTypeEnum {
    APP_PAYMENT = "APP_PAYMENT",
    BANK_REDIRECT = "BANK_REDIRECT",
    BUY_ONLINE_PAY_AT_STORE = "BUY_ONLINE_PAY_AT_STORE",
    CASH = "CASH",
    CASH_ON_DELIVERY = "CASH_ON_DELIVERY",
    CREDIT_CARD = "CREDIT_CARD",
    CREDIT_CARD_ON_DELIVERY = "CREDIT_CARD_ON_DELIVERY",
    DIRECT_DEBIT = "DIRECT_DEBIT",
    GIFT_CARD = "GIFT_CARD",
    MONEY_ORDER = "MONEY_ORDER",
    OTHER = "OTHER",
    PAY_LATER = "PAY_LATER",
    SLICE_IT = "SLICE_IT",
    WALLET = "WALLET"
}
export declare enum ProductAttributeTypeEnum {
    BOOLEAN = "BOOLEAN",
    CHOICE = "CHOICE",
    DATETIME = "DATETIME",
    HTML = "HTML",
    IMAGE = "IMAGE",
    MULTIPLE_CHOICE = "MULTIPLE_CHOICE",
    NUMERIC = "NUMERIC",
    PRODUCT = "PRODUCT",
    TABLE = "TABLE",
    TEXT = "TEXT"
}
export declare enum ProductFilterDisplayTypeEnum {
    BOX = "BOX",
    DATE_RANGE = "DATE_RANGE",
    LIST = "LIST",
    NUMBER_RANGE = "NUMBER_RANGE",
    NUMBER_RANGE_LIST = "NUMBER_RANGE_LIST",
    SWATCH = "SWATCH"
}
export declare enum ProductFilterSortTypeEnum {
    ALPHABETICAL_ASC = "ALPHABETICAL_ASC",
    ALPHABETICAL_DESC = "ALPHABETICAL_DESC",
    CUSTOM_SORT = "CUSTOM_SORT",
    PRODUCT_COUNT_ASC = "PRODUCT_COUNT_ASC",
    PRODUCT_COUNT_DESC = "PRODUCT_COUNT_DESC"
}
export declare enum ProductFilterTypeEnum {
    ATTRIBUTE = "ATTRIBUTE",
    AVAILABLE_VARIANT_VALUE = "AVAILABLE_VARIANT_VALUE",
    BRAND = "BRAND",
    DISCOUNT_RATIO = "DISCOUNT_RATIO",
    PRICE = "PRICE",
    STOCK_STATUS = "STOCK_STATUS",
    TAG = "TAG",
    VARIANT_TYPE = "VARIANT_TYPE"
}
export declare enum ProductOptionSelectTypeEnum {
    BOX = "BOX",
    SELECT = "SELECT",
    SWATCH = "SWATCH"
}
export declare enum ProductOptionTypeEnum {
    CHECKBOX = "CHECKBOX",
    CHOICE = "CHOICE",
    COLOR_PICKER = "COLOR_PICKER",
    DATE_PICKER = "DATE_PICKER",
    FILE = "FILE",
    IMAGE = "IMAGE",
    TEXT = "TEXT",
    TEXT_AREA = "TEXT_AREA"
}
export declare enum ProductSearchShowStockOptionEnum {
    HIDE_OUT_OF_STOCK = "HIDE_OUT_OF_STOCK",
    SHOW_ALL = "SHOW_ALL",
    SHOW_OUT_OF_STOCK_AT_END = "SHOW_OUT_OF_STOCK_AT_END"
}
export declare enum ProductUnitTypeEnum {
    CENTILITER = "CENTILITER",
    CENTIMETER = "CENTIMETER",
    CUBIC_METERS = "CUBIC_METERS",
    CUSTOM = "CUSTOM",
    GRAM = "GRAM",
    KILOGRAM = "KILOGRAM",
    LITER = "LITER",
    METER = "METER",
    MILLIGRAM = "MILLIGRAM",
    MILLILITER = "MILLILITER",
    MILLIMETER = "MILLIMETER",
    SQUARE_METERS = "SQUARE_METERS"
}
export declare enum RaffleMetadataTargetTypeEnum {
    RAFFLE = "RAFFLE"
}
export declare enum RaffleParticipantStatusEnum {
    COMPLETED = "COMPLETED",
    IN_PROGRESS = "IN_PROGRESS",
    LOSER = "LOSER",
    WINNER = "WINNER"
}
export declare enum SFAnalyticsTrafficSourceEnum {
    ADS_OTHER = "ADS_OTHER",
    AFFILIATE = "AFFILIATE",
    BING_ADS = "BING_ADS",
    DIRECT = "DIRECT",
    DISPLAY = "DISPLAY",
    EMAIL = "EMAIL",
    FACEBOOK_ADS = "FACEBOOK_ADS",
    GOOGLE_ADS = "GOOGLE_ADS",
    INSTAGRAM_ADS = "INSTAGRAM_ADS",
    ORGANIC_SEARCH = "ORGANIC_SEARCH",
    OTHER = "OTHER",
    PAID_TRAFFIC = "PAID_TRAFFIC",
    REFERRAL = "REFERRAL",
    SOCIAL = "SOCIAL"
}
export declare enum SortByDirectionEnum {
    ASC = "ASC",
    DESC = "DESC"
}
export declare enum SortByTypeEnum {
    AVERAGE_RATING = "AVERAGE_RATING",
    CREATED_AT = "CREATED_AT",
    DISCOUNT_RATIO = "DISCOUNT_RATIO",
    MANUAL_SORT = "MANUAL_SORT",
    NAME = "NAME",
    PRICE = "PRICE",
    REVIEW_COUNT = "REVIEW_COUNT",
    SALE_COUNT = "SALE_COUNT"
}
export declare enum StockLocationDeliveryTimeEnum {
    TWO_IN_FOUR_DAYS = "TWO_IN_FOUR_DAYS",
    WITHIN_FOUR_HOURS = "WITHIN_FOUR_HOURS",
    WITHIN_ONE_HOUR = "WITHIN_ONE_HOUR",
    WITHIN_PLUS_FIVE_DAYS = "WITHIN_PLUS_FIVE_DAYS",
    WITHIN_TWENTY_FOUR_HOURS = "WITHIN_TWENTY_FOUR_HOURS",
    WITHIN_TWO_HOURS = "WITHIN_TWO_HOURS"
}
export declare enum StockLocationTypeEnum {
    PHYSICAL = "PHYSICAL",
    VIRTUAL = "VIRTUAL"
}
export declare enum StorefrontPageTypesEnum {
    BLOG = "BLOG",
    BLOG_CATEGORY = "BLOG_CATEGORY",
    BRAND = "BRAND",
    CATEGORY = "CATEGORY",
    CUSTOM = "CUSTOM",
    PRODUCT = "PRODUCT"
}
export declare enum StorefrontRegisterSettingsCheckboxType {
    APPROVED = "APPROVED",
    REQUIRED = "REQUIRED",
    SHOW = "SHOW"
}
export declare enum StorefrontStatusTypes {
    FAILED = "FAILED",
    NOT_DEPLOYED = "NOT_DEPLOYED",
    READY = "READY",
    WAITING = "WAITING"
}
export declare enum StorefrontThemeStatus {
    FAILED = "FAILED",
    NOT_DEPLOYED = "NOT_DEPLOYED",
    READY = "READY",
    WAITING = "WAITING"
}
export declare enum TemplateEnum {
    ABANDONED_CHECKOUT = "ABANDONED_CHECKOUT",
    CONTACT_FORM_MERCHANT = "CONTACT_FORM_MERCHANT",
    CUSTOMER_ACCOUNT_INVITATION = "CUSTOMER_ACCOUNT_INVITATION",
    CUSTOMER_RESET_PASSWORD = "CUSTOMER_RESET_PASSWORD",
    CUSTOMER_REVIEW = "CUSTOMER_REVIEW",
    CUSTOM_MAIL = "CUSTOM_MAIL",
    MERCHANT_CUSTOMER_REVIEW = "MERCHANT_CUSTOMER_REVIEW",
    MERCHANT_LICENCE_E_INVOICE = "MERCHANT_LICENCE_E_INVOICE",
    MERCHANT_RESET_PASSWORD = "MERCHANT_RESET_PASSWORD",
    MERCHANT_WELCOME = "MERCHANT_WELCOME",
    MONEY_TRANSFER_REMINDER = "MONEY_TRANSFER_REMINDER",
    ORDER_CANCELLED = "ORDER_CANCELLED",
    ORDER_CLICK_AND_COLLECT = "ORDER_CLICK_AND_COLLECT",
    ORDER_CREATED = "ORDER_CREATED",
    ORDER_CREATED_MERCHANT = "ORDER_CREATED_MERCHANT",
    ORDER_CREATED_MONEY_TRANSFER = "ORDER_CREATED_MONEY_TRANSFER",
    ORDER_E_INVOICE = "ORDER_E_INVOICE",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_PACKAGE_DELIVERED = "ORDER_PACKAGE_DELIVERED",
    ORDER_READY_FOR_PICK_UP = "ORDER_READY_FOR_PICK_UP",
    ORDER_READY_FOR_SHIPMENT = "ORDER_READY_FOR_SHIPMENT",
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_REFUND_REQUEST = "ORDER_REFUND_REQUEST",
    ORDER_REFUND_REQUEST_APPROVE = "ORDER_REFUND_REQUEST_APPROVE",
    ORDER_REFUND_REQUEST_MERCHANT = "ORDER_REFUND_REQUEST_MERCHANT",
    ORDER_REFUND_REQUEST_REJECT = "ORDER_REFUND_REQUEST_REJECT",
    PARTNER_MERCHANT_OPEN = "PARTNER_MERCHANT_OPEN",
    PARTNER_STAFF_INVITE = "PARTNER_STAFF_INVITE",
    PRODUCT_BACK_IN_STOCK_REMINDER = "PRODUCT_BACK_IN_STOCK_REMINDER",
    PRODUCT_OUT_OF_STOCK_REMINDER = "PRODUCT_OUT_OF_STOCK_REMINDER",
    RAFFLE_PARTICIPANT_CREATED = "RAFFLE_PARTICIPANT_CREATED",
    RAFFLE_PARTICIPANT_WINNER = "RAFFLE_PARTICIPANT_WINNER",
    STAFF_INVITE = "STAFF_INVITE",
    UPDATE_TRACKING_INFO = "UPDATE_TRACKING_INFO",
    WELCOME = "WELCOME",
    WRONG_EXCEL_IMPORT = "WRONG_EXCEL_IMPORT"
}
export declare enum TransactionCardAssociationEnum {
    AMERICAN_EXPRESS = "AMERICAN_EXPRESS",
    MASTER_CARD = "MASTER_CARD",
    TROY = "TROY",
    VISA = "VISA"
}
export declare enum TransactionCardTypeEnum {
    CREDIT = "CREDIT",
    DEBIT = "DEBIT",
    PREPAID = "PREPAID"
}
export declare enum TransactionStatusEnum {
    AUTHORIZED = "AUTHORIZED",
    FAILED = "FAILED",
    PENDING = "PENDING",
    SUCCESS = "SUCCESS"
}
export declare enum TransactionTypeEnum {
    REFUND = "REFUND",
    SALE = "SALE",
    VOID = "VOID"
}
export declare enum UserAgentDeviceType {
    CAMERA = "CAMERA",
    CAR = "CAR",
    CONSOLE = "CONSOLE",
    DESKTOP = "DESKTOP",
    FEATURE_PHONE = "FEATURE_PHONE",
    OTHER = "OTHER",
    PERIPHERAL = "PERIPHERAL",
    PHABLET = "PHABLET",
    PORTABLE_MEDIA_PLAYER = "PORTABLE_MEDIA_PLAYER",
    SMARTPHONE = "SMARTPHONE",
    SMART_DISPLAY = "SMART_DISPLAY",
    SMART_SPEAKER = "SMART_SPEAKER",
    TABLET = "TABLET",
    TELEVISION = "TELEVISION",
    WEARABLE = "WEARABLE"
}
export declare enum VariantSelectionTypeEnum {
    CHOICE = "CHOICE",
    COLOR = "COLOR"
}
export declare enum VerificationTypeEnum {
    EMAIL = "EMAIL",
    MERSIS = "MERSIS"
}
export interface AbandonedCartFlow {
    authorizedAppId: string | null;
    campaignId: string | null;
    canApplicable: boolean;
    couponId: string | null;
    customerFilters: AbandonedCartFlowCustomerFilter | null;
    flowId: string;
    mailSendDate: any | null;
    mailTranslationId: string | null;
    messageType: AbandonedCartSettingsNotificationTypeEnum | null;
    recoverEmailStatus: CheckoutRecoveryEmailStatusEnum;
    sendAfter: number;
    smsTranslationId: string | null;
}
export interface AbandonedCartFlowCustomerFilter {
    sendOnlyActiveAccount: boolean | null;
    sendOnlySubscribedToEmail: boolean | null;
}
export interface AdditionalPrice {
    amount: number;
    amountType: PaymentGatewayTransactionFeeTypeEnum;
    name: string;
    type: PaymentGatewayAdditionalPriceTypeEnum;
}
export interface ApplicableProductFilterValue {
    colorCode: string | null;
    id: string;
    key: string;
    name: string;
    thumbnailImageId: string | null;
}
export interface AppliedProduct {
    productId: string | null;
    variantId: string;
}
export interface AvailableShippingMethod {
    price: number;
    rateName: string;
    shippingMethod: OrderShippingMethodEnum;
    shippingSettingsId: string;
    shippingZoneRateId: string;
}
export interface Blog {
    blogContent: BlogContent;
    category: BlogCategory;
    categoryId: string;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    imageId: string;
    isPublished: boolean;
    locale: string | null;
    metadata: BlogMetadata;
    publishedAt: any | null;
    shortDescription: string;
    storefrontId: string;
    tagIds: string[] | null;
    tags: BlogTag[] | null;
    title: string;
    updatedAt: any | null;
    writer: BlogWriter;
}
export interface BlogCategory {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    imageId: string;
    metadata: BlogMetadata;
    name: string;
    updatedAt: any | null;
}
export interface BlogCategoryPaginationResponse {
    count: number;
    data: BlogCategory[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface BlogContent {
    content: string;
    contentData: string | null;
    contentSource: string | null;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    updatedAt: any | null;
}
export interface BlogMetadata {
    canonicals: string[] | null;
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    disableIndex: boolean | null;
    id: string;
    pageTitle: string | null;
    slug: string;
    targetId: string | null;
    targetType: BlogMetadataTargetTypeEnum | null;
    updatedAt: any | null;
}
export interface BlogMetadataPaginationResponse {
    count: number;
    data: BlogMetadata[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface BlogPaginationResponse {
    count: number;
    data: Blog[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface BlogTag {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    updatedAt: any | null;
}
export interface BlogWriter {
    firstName: string;
    lastName: string;
}
export interface BundleProductModel {
    addToBundleBasePrice: boolean | null;
    discountRatio: number | null;
    filteredVariantIds: string[];
    maxQuantity: number | null;
    minQuantity: number | null;
    order: number;
    productId: string;
    quantity: number;
}
export interface BundleSettingsModel {
    maxBundleQuantity: number | null;
    minBundleQuantity: number | null;
    products: BundleProductModel[];
}
export interface BuyX {
    amount: number;
    applyByQuantity: boolean;
    filter: CampaignFilter;
}
export interface BuyXThenGetY {
    buyX: BuyX;
    getY: GetY;
    maxUsagePerOrder: number | null;
}
export interface Campaign {
    applicableCustomerGroupIds: string[] | null;
    applicableCustomerIds: string[] | null;
    applicablePrice: CampaignApplicablePriceEnum;
    buyXThenGetY: BuyXThenGetY | null;
    canCombineWithOtherCampaigns: boolean;
    createdAt: any | null;
    createdFor: CampaignCreatedForEnum | null;
    currencyCodes: string[] | null;
    dateRange: CampaignDateRangeField | null;
    deleted: boolean | null;
    fixedDiscount: FixedDiscount | null;
    hasCoupon: boolean;
    id: string;
    includeDiscountedProducts: boolean | null;
    isFreeShipping: boolean | null;
    onlyUseCustomer: boolean | null;
    salesChannelIds: string[] | null;
    title: string;
    type: CampaignTypeEnum;
    updatedAt: any | null;
    usageCount: number;
    usageLimit: number | null;
    usageLimitPerCustomer: number | null;
}
export interface CampaignDateRangeField {
    end: any | null;
    start: any | null;
}
export interface CampaignFilter {
    idList: string[];
    type: CampaignFilterTypeEnum;
}
export interface CampaignMinMaxRangeField {
    max: number | null;
    min: number | null;
}
export interface CampaignOffer {
    availableSalesChannelIds: string[];
    createdAt: any | null;
    currencyCodes: string[] | null;
    deleted: boolean | null;
    endDate: any | null;
    followUpActionType: CampaignOfferFollowUpActionTypeEnum;
    id: string;
    minimumRequiredCartAmount: number | null;
    name: string;
    offers: CampaignOfferProduct[];
    startDate: any | null;
    targetPageTypes: CampaignOfferTargetPageTypeEnum[];
    triggerSettings: CampaignOfferTriggerSettings;
    type: CampaignOfferTypeEnum;
    updatedAt: any | null;
}
export interface CampaignOfferProduct {
    applicablePrice: CampaignOfferProductApplicablePriceEnum | null;
    countdownMinutes: number | null;
    description: string | null;
    discountAmount: number | null;
    discountType: OrderAmountTypeEnum | null;
    excludedVariantIdList: string[] | null;
    id: string;
    order: number;
    productId: string;
    showCriteria: CampaignOfferProductShowCriteriaEnum | null;
    skipOfferIfProductExistsInCart: boolean | null;
    title: string;
    translations: CampaignOfferProductTranslation[] | null;
}
export interface CampaignOfferProductTranslation {
    description: string | null;
    locale: string;
    title: string;
}
export interface CampaignOfferTriggerSettings {
    filterType: CampaignOfferTriggerFilterTypeEnum;
    valueList: string[];
}
export interface Cart {
    campaignOffers: CartCampaignOffer[] | null;
    createdAt: any | null;
    createdBy: CartCreatedByEnum | null;
    currencyCode: string | null;
    currencySymbol: string | null;
    customerId: string | null;
    deleted: boolean | null;
    dueDate: any;
    id: string;
    itemCount: number;
    items: OrderLineItem[];
    merchantId: string;
    priceListId: string | null;
    salesChannelId: string;
    status: CartStatusEnum;
    storefrontId: string | null;
    storefrontRouting: CartStorefrontRouting | null;
    storefrontRoutingId: string | null;
    storefrontThemeId: string | null;
    taxLines: OrderTaxLine[] | null;
    totalPrice: number;
    updatedAt: any | null;
}
export interface CartCampaignOffer {
    appliedOrderLineId: string | null;
    campaignOfferId: string;
    campaignOfferProductId: string | null;
    offerEndDate: any | null;
    offerStartDate: any;
    status: CartCampaignOfferStatus;
    targetPageTypes: CampaignOfferTargetPageTypeEnum[];
    triggerSourceOrderLineId: string;
}
export interface CartStorefrontRouting {
    domain: string | null;
    dynamicCurrencySettings: CartStorefrontRoutingDynamicCurrencySettings | null;
    id: string;
    locale: string | null;
    path: string | null;
    priceListId: string | null;
}
export interface CartStorefrontRoutingDynamicCurrencySettings {
    roundingFormat: string | null;
    targetCurrencyCode: string;
    targetCurrencySymbol: string | null;
}
export interface CartV2 {
    abandonedCartFlows: AbandonedCartFlow[] | null;
    availableShippingMethods: AvailableShippingMethod[] | null;
    billingAddress: OrderAddress | null;
    campaignOffers: CartV2CampaignOffer[] | null;
    cartId: string | null;
    cartStatus: CartV2StatusEnum | null;
    checkoutId: string | null;
    clientIp: string | null;
    couponCode: string | null;
    createdAt: any | null;
    createdBy: CartCreatedByEnum | null;
    currencyCode: string;
    currencyRates: OrderCurrencyRate[];
    currencySymbol: string | null;
    customer: OrderCustomer | null;
    customerId: string | null;
    deleted: boolean | null;
    dueDate: any | null;
    giftPackageLines: OrderGiftPackageLine[] | null;
    giftPackageNote: string | null;
    host: string | null;
    id: string;
    isGiftPackage: boolean | null;
    itemCount: number | null;
    merchantId: string;
    note: string | null;
    orderAdjustments: OrderAdjustment[] | null;
    orderLineItems: OrderLineItem[];
    orderNumber: string | null;
    orderPackageStatus: OrderPackageStatusEnum | null;
    orderedAt: any | null;
    priceListId: string | null;
    recoverEmailStatus: CheckoutRecoveryEmailStatusEnum | null;
    recoveryStatus: CheckoutRecoveryStatusEnum | null;
    salesChannelId: string;
    sessionInfo: OrderSessionInfo | null;
    shippingAddress: OrderAddress | null;
    shippingLines: OrderShippingLine[] | null;
    shippingMethod: OrderShippingMethodEnum;
    shippingSettingsId: string | null;
    shippingZoneRateId: string | null;
    status: CartV2StatusEnum;
    stockLocationId: string | null;
    storefrontId: string | null;
    storefrontRouting: OrderStorefrontRouting | null;
    storefrontRoutingId: string | null;
    storefrontThemeId: string | null;
    taxLines: OrderTaxLine[] | null;
    totalFinalPrice: number;
    totalPrice: number;
    updatedAt: any | null;
    userAgent: string | null;
}
export interface CartV2CampaignOffer {
    appliedOrderLineId: string | null;
    campaignOffer: CampaignOffer | null;
    campaignOfferId: string;
    campaignOfferProductId: string | null;
    offerEndDate: any | null;
    offerStartDate: any;
    status: CartCampaignOfferStatus;
    targetPageTypes: CampaignOfferTargetPageTypeEnum[];
    triggerSourceOrderLineId: string;
}
export interface Category {
    categoryPath: string[] | null;
    categoryPathItems: CategoryPathItem[] | null;
    conditions: CategoryCondition[] | null;
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    id: string;
    imageId: string | null;
    isAutomated: boolean | null;
    metaData: HTMLMetaData | null;
    name: string;
    orderType: CategoryProductsOrderTypeEnum | null;
    parentId: string | null;
    salesChannelIds: string[] | null;
    shouldMatchAllConditions: boolean | null;
    translations: CategoryTranslation[] | null;
    updatedAt: any | null;
}
export interface CategoryCondition {
    conditionType: CategoryConditionTypeEnum;
    valueList: string[];
}
export interface CategoryPaginationResponse {
    count: number;
    data: Category[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface CategoryPathItem {
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    id: string;
    imageId: string | null;
    isAutomated: boolean | null;
    metaData: HTMLMetaData | null;
    name: string;
    translations: CategoryTranslation[] | null;
    updatedAt: any | null;
}
export interface CategoryTranslation {
    description: string | null;
    locale: string;
    name: string | null;
}
export interface Checkout {
    abandonedCheckoutFlows: AbandonedCartFlow[] | null;
    adjustments: OrderAdjustment[] | null;
    availableShippingMethods: AvailableShippingMethod[] | null;
    billingAddress: OrderAddress | null;
    cart: Cart | null;
    cartId: string;
    couponCode: string | null;
    createdAt: any | null;
    customer: CheckoutCustomer | null;
    deleted: boolean | null;
    giftPackageLines: OrderGiftPackageLine[] | null;
    giftPackageNote: string | null;
    id: string;
    isGiftPackage: boolean | null;
    merchantId: string;
    note: string | null;
    orderId: string | null;
    orderNumber: string | null;
    orderedAt: any | null;
    recoverEmailStatus: CheckoutRecoveryEmailStatusEnum | null;
    recoveryStatus: CheckoutRecoveryStatusEnum | null;
    shippingAddress: OrderAddress | null;
    shippingLines: OrderShippingLine[] | null;
    shippingMethod: OrderShippingMethodEnum;
    shippingSettingsId: string | null;
    shippingZoneRateId: string | null;
    status: CheckoutStatusEnum;
    stockLocationId: string | null;
    totalFinalPrice: number;
    updatedAt: any | null;
}
export interface CheckoutCustomer {
    accountStatus: CustomerAccountStatusEnum | null;
    customerGroupIds: string[] | null;
    email: string | null;
    firstName: string | null;
    id: string | null;
    identityNumber: string | null;
    lastName: string | null;
    notificationsAccepted: boolean | null;
    phone: string | null;
    subscriptionStatus: CustomerEmailSubscriptionStatusesEnum | null;
}
export interface CheckoutOption {
    name: string;
    required: boolean;
}
export interface CheckoutSettings {
    createdAt: any | null;
    deleted: boolean | null;
    giftPackagePriceList: CheckoutSettingsPrice[] | null;
    id: string;
    identityNumberRequirement: CheckoutRequirementEnum | null;
    isAccountRequired: boolean;
    isGiftPackageEnabled: boolean | null;
    isQuickRegistrationEnabled: boolean | null;
    isShowPostalCode: boolean | null;
    isTermsAndConditionsDefaultChecked: boolean | null;
    options: CheckoutOption[] | null;
    phoneRequirement: CheckoutRequirementEnum;
    postalCodeRequirement: CheckoutRequirementEnum | null;
    showCheckoutNote: boolean | null;
    showTermsAndConditionsCheckbox: boolean;
    storefrontId: string;
    updatedAt: any | null;
}
export interface CheckoutSettingsPrice {
    currencyCode: string;
    currencySymbol: string | null;
    price: number;
}
export interface CheckStocksLineResponse {
    isAvailable: boolean;
    stockCount: number;
    variantId: string;
}
export interface CheckStocksResponse {
    lines: CheckStocksLineResponse[];
}
export interface City {
    cityCode: string | null;
    countryId: string;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    latitude: string | null;
    longitude: string | null;
    name: string;
    order: number | null;
    stateId: string;
    updatedAt: any | null;
}
export interface Country {
    capital: string | null;
    createdAt: any | null;
    currency: string | null;
    currencyCode: string | null;
    currencySymbol: string | null;
    deleted: boolean | null;
    emoji: string | null;
    emojiString: string | null;
    id: string;
    iso2: string | null;
    iso3: string | null;
    locationTranslations: LocationTranslations;
    name: string;
    native: string | null;
    phoneCode: string | null;
    region: string | null;
    subregion: string | null;
    updatedAt: any | null;
}
export interface CreateAdyenSessionResponse {
    clientKey: string;
    returnUrl: string;
    sessionData: string | null;
    sessionId: string;
}
export interface CreateKlarnaTokenResponse {
    authorizeUrl: string | null;
    clientToken: string | null;
    sessionId: string | null;
    transactionId: string | null;
}
export interface CreatePaypalOrderResponse {
    returnUrl: string;
    sessionToken: string;
    transactionId: string;
}
export interface CreateStripePaymentIntentResponse {
    accountId: string;
    apiKey: string;
    callbackUrl: string;
    clientSecret: string;
}
export interface CurrencyRate {
    baseCurrency: string;
    baseCurrencyCode: string | null;
    baseCurrencySymbol: string | null;
    createdAt: any | null;
    date: any;
    deleted: boolean | null;
    id: string;
    rates: CurrencyRateData[];
    updatedAt: any | null;
}
export interface CurrencyRateData {
    code: string;
    rate: number;
}
export interface Customer {
    accountStatus: CustomerAccountStatusEnum | null;
    accountStatusUpdatedAt: any | null;
    addresses: CustomerAddress[] | null;
    attributes: CustomerAttributeValue[] | null;
    createdAt: any | null;
    customerGroupIds: string[] | null;
    customerSequence: number | null;
    deleted: boolean | null;
    email: string | null;
    emailVerifiedDate: any | null;
    firstName: string;
    fullName: string | null;
    id: string;
    isEmailVerified: boolean | null;
    isPhoneVerified: boolean | null;
    lastName: string | null;
    note: string | null;
    orderCount: number | null;
    passwordUpdateDate: any | null;
    phone: string | null;
    phoneVerifiedDate: any | null;
    preferredLanguage: string | null;
    registrationSource: CustomerRegistrationSourceEnum | null;
    subscriptionStatus: CustomerEmailSubscriptionStatusesEnum | null;
    subscriptionStatusUpdatedAt: any | null;
    tagIds: string[] | null;
    updatedAt: any | null;
}
export interface CustomerAddress {
    addressLine1: string;
    addressLine2: string | null;
    attributes: CustomerAttributeValue[] | null;
    city: CustomerAddressCity;
    company: string | null;
    country: CustomerAddressCountry;
    createdAt: any | null;
    deleted: boolean | null;
    district: CustomerAddressDistrict | null;
    firstName: string;
    id: string;
    identityNumber: string | null;
    isDefault: boolean | null;
    lastName: string;
    phone: string | null;
    postalCode: string | null;
    state: CustomerAddressState | null;
    taxNumber: string | null;
    taxOffice: string | null;
    title: string;
    updatedAt: any | null;
}
export interface CustomerAddressCity {
    code: string | null;
    id: string | null;
    name: string;
}
export interface CustomerAddressCountry {
    code: string | null;
    id: string | null;
    iso2: string | null;
    iso3: string | null;
    name: string;
}
export interface CustomerAddressDistrict {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface CustomerAddressState {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface CustomerAttribute {
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    id: string;
    name: string;
    options: CustomerAttributeOption[] | null;
    order: number | null;
    salesChannels: CustomerAttributeSalesChannel[] | null;
    translations: CustomerAttributeTranslation[] | null;
    type: CustomerAttributeTypeEnum;
    updatedAt: any | null;
}
export interface CustomerAttributeOption {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    order: number | null;
    updatedAt: any | null;
}
export interface CustomerAttributeOptionTranslation {
    id: string;
    name: string | null;
}
export interface CustomerAttributeSalesChannel {
    permission: CustomerAttributePermissionEnum;
    registerPageRequirement: CustomerAttributeRegisterPageRequirementEnum;
    salesChannelId: string;
    storefrontId: string;
}
export interface CustomerAttributeTranslation {
    description: string | null;
    locale: string;
    name: string | null;
    options: CustomerAttributeOptionTranslation[] | null;
}
export interface CustomerAttributeValue {
    customerAttributeId: string | null;
    customerAttributeOptionId: string | null;
    value: string | null;
}
export interface CustomerCheckResponse {
    exists: boolean;
}
export interface CustomerFavoriteProduct {
    createdAt: any | null;
    customerId: string;
    deleted: boolean | null;
    id: string;
    productId: string;
    updatedAt: any | null;
}
export interface CustomerLoginResponse {
    customer: Customer | null;
    token: string;
    tokenExpiry: number;
}
export interface CustomerRefreshTokenResponse {
    token: string;
    tokenExpiry: number;
}
export interface CustomerReview {
    comment: string | null;
    createdAt: any | null;
    customerId: string | null;
    deleted: boolean | null;
    email: string | null;
    firstName: string | null;
    id: string;
    imageIds: string[] | null;
    lastName: string | null;
    orderId: string | null;
    orderNumber: string | null;
    productId: string;
    salesChannelId: string | null;
    star: number;
    status: CustomerReviewStatusEnum | null;
    storefrontId: string | null;
    title: string | null;
    updatedAt: any | null;
}
export interface CustomerReviewSFPaginationResponse {
    count: number;
    data: CustomerReview[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface CustomerReviewSummary {
    averageStar: number;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    productId: string;
    stars: CustomerReviewSummaryStar[];
    storefrontId: string | null;
    totalReview: number;
    updatedAt: any | null;
}
export interface CustomerReviewSummaryPaginationResponse {
    count: number;
    data: CustomerReviewSummary[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface CustomerReviewSummaryStar {
    count: number;
    star: number;
}
export interface CustomerSettings {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    requireCaptchaValidation: boolean | null;
    requireEmailValidation: boolean;
    salesChannelId: string;
    storefrontId: string;
    updatedAt: any | null;
}
export interface District {
    cityId: string;
    countryId: string;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    latitude: string | null;
    longitude: string | null;
    name: string;
    order: number | null;
    stateId: string;
    updatedAt: any | null;
}
export interface FixedDiscount {
    amount: number | null;
    filters: CampaignFilter[] | null;
    lineItemQuantityRange: CampaignMinMaxRangeField | null;
    priceRange: CampaignMinMaxRangeField | null;
}
export interface GetAvailableStockLocation {
    address: GetAvailableStockLocationAddress | null;
    id: string;
    name: string;
    type: StockLocationTypeEnum | null;
}
export interface GetAvailableStockLocationAddress {
    address: string | null;
    city: GetAvailableStockLocationAddressCity | null;
    country: GetAvailableStockLocationAddressCity | null;
    district: GetAvailableStockLocationAddressCity | null;
    phone: string | null;
    postalCode: string | null;
    state: GetAvailableStockLocationAddressCity | null;
}
export interface GetAvailableStockLocationAddressCity {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface GetAvailableStockLocationsResponse {
    stockLocations: GetAvailableStockLocation[];
}
export interface GetPaypalClientIdResponse {
    clientId: string;
    merchantClientId: string | null;
    merchantId: string;
}
export interface GetProductCampaignsResponse {
    campaign: Campaign;
    variantIds: string[];
}
export interface GetProductOptionFileUrl {
    fields: any;
    optionUrl: string;
    url: string;
}
export interface GetVariantStockLocation {
    stockCount: number;
    stockLocation: GetAvailableStockLocation;
    variantId: string;
}
export interface GetVariantStockLocationListResponse {
    stockLocations: GetVariantStockLocation[];
}
export interface GetY {
    amount: number;
    automaticallyAddItemToCart: boolean | null;
    discountRatio: number;
    filter: CampaignFilter;
}
export interface HTMLMetaData {
    canonicals: string[] | null;
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    disableIndex: boolean | null;
    id: string;
    metadataOverrides: HTMLMetaDataOverride[] | null;
    pageTitle: string | null;
    redirectTo: string | null;
    slug: string;
    targetId: string | null;
    targetType: HTMLMetaDataTargetTypeEnum | null;
    translations: HTMLMetaDataTranslation[] | null;
    updatedAt: any | null;
}
export interface HTMLMetaDataOverride {
    description: string;
    language: string | null;
    pageTitle: string;
    storefrontId: string | null;
    storefrontRegionId: string | null;
}
export interface HTMLMetaDataTranslation {
    description: string | null;
    locale: string;
    pageTitle: string | null;
}
export interface Invoice {
    appId: string;
    appName: string;
    createdAt: any | null;
    hasPdf: boolean | null;
    id: string;
    invoiceData: any | null;
    invoiceNumber: string;
    storeAppId: string;
    type: InvoiceTypeEnum;
}
export interface LocationTranslations {
    de: string | null;
    en: string;
    fr: string | null;
    tr: string;
}
export interface MasterPassTokenResponse {
    requestReferenceNumber: string;
    timeZone: string;
    token: string;
}
export interface MerchantAddress {
    addressLine1: string | null;
    addressLine2: string | null;
    city: MerchantAddressCity | null;
    company: string | null;
    country: MerchantAddressCountry | null;
    district: MerchantAddressDistrict | null;
    firstName: string | null;
    identityNumber: string | null;
    lastName: string | null;
    postalCode: string | null;
    state: MerchantAddressState | null;
    taxNumber: string | null;
    taxOffice: string | null;
    title: string | null;
    type: MerchantSettingsAddressTypeEnum | null;
    vkn: string | null;
}
export interface MerchantAddressCity {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface MerchantAddressCountry {
    code: string | null;
    id: string | null;
    iso2: string | null;
    iso3: string | null;
    name: string | null;
}
export interface MerchantAddressDistrict {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface MerchantAddressState {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface MerchantSettings {
    address: MerchantAddress | null;
    createdAt: any | null;
    currencyFormats: MerchantSettingsCurrencyFormat[] | null;
    deleted: boolean | null;
    id: string;
    logoId: string | null;
    merchantId: string;
    merchantName: string;
    phone: string | null;
    updatedAt: any | null;
}
export interface MerchantSettingsCurrencyFormat {
    currencyCode: string;
    decimalSeparator: string;
    omitZeroDecimal: boolean;
    symbol: string;
    symbolPosition: CurrencyFormatSymbolPosition;
    thousandSeparator: string;
}
export interface OrderAddress {
    addressLine1: string;
    addressLine2: string | null;
    city: OrderAddressCity;
    company: string | null;
    country: OrderAddressCountry;
    district: OrderAddressDistrict | null;
    firstName: string;
    id: string | null;
    identityNumber: string | null;
    isDefault: boolean;
    lastName: string;
    phone: string | null;
    postalCode: string | null;
    region: ShippingZoneRegion | null;
    state: OrderAddressState | null;
    taxNumber: string | null;
    taxOffice: string | null;
}
export interface OrderAddressCity {
    code: string | null;
    id: string | null;
    name: string;
}
export interface OrderAddressCountry {
    code: string | null;
    id: string | null;
    iso2: string | null;
    iso3: string | null;
    name: string;
}
export interface OrderAddressDistrict {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface OrderAddressState {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface OrderAdjustment {
    amount: number;
    amountType: OrderAmountTypeEnum;
    appliedOrderLines: OrderAdjustmentAppliedOrderLine[] | null;
    campaignId: string | null;
    campaignType: CampaignTypeEnum | null;
    couponId: string | null;
    name: string;
    order: number;
    type: OrderAdjustmentEnum;
}
export interface OrderAdjustmentAppliedOrderLine {
    amount: number;
    appliedQuantity: number;
    isAutoCreated: boolean | null;
    orderLineId: string;
}
export interface OrderCurrencyRate {
    code: string;
    originalRate: number;
    rate: number;
}
export interface OrderCustomer {
    email: string | null;
    firstName: string | null;
    fullName: string | null;
    id: string | null;
    isGuestCheckout: boolean | null;
    lastName: string | null;
    notificationsAccepted: boolean | null;
    phone: string | null;
}
export interface OrderGiftPackageLine {
    price: number;
    taxValue: number | null;
}
export interface OrderLineBaseUnit {
    baseAmount: number;
    type: ProductUnitTypeEnum;
    unit: OrderLineVariantUnitType | null;
}
export interface OrderLineBundleVariant {
    barcodeList: string[] | null;
    baseUnit: OrderLineBaseUnit | null;
    brand: OrderLineVariantBrand | null;
    categories: OrderLineVariantCategory[] | null;
    hsCode: string | null;
    id: string | null;
    mainImageId: string | null;
    name: string;
    prices: OrderLineVariantPrice[] | null;
    productId: string | null;
    sku: string | null;
    slug: string | null;
    tagIds: string[] | null;
    tags: OrderLineVariantTag[] | null;
    taxValue: number | null;
    type: number | null;
    unit: OrderLineVariantUnit | null;
    variantValues: OrderLineVariantVariantValues[] | null;
    weight: number | null;
}
export interface OrderLineDiscount {
    amount: number;
    amountType: OrderAmountTypeEnum;
    campaignOfferId: string | null;
    campaignOfferProductId: string | null;
    maxApplicableQuantity: number | null;
    reason: string | null;
}
export interface OrderLineItem {
    createdAt: any | null;
    currencyCode: string | null;
    currencySymbol: string | null;
    deleted: boolean | null;
    discount: OrderLineDiscount | null;
    discountPrice: number | null;
    finalPrice: number | null;
    finalUnitPrice: number | null;
    id: string;
    options: OrderLineOption[] | null;
    originalOrderLineItemId: string | null;
    price: number;
    quantity: number;
    status: OrderLineItemStatusEnum;
    statusUpdatedAt: any | null;
    stockLocationId: string | null;
    taxValue: number | null;
    unitPrice: number | null;
    updatedAt: any | null;
    variant: OrderLineVariant;
}
export interface OrderLineOption {
    name: string;
    productOptionId: string;
    productOptionsSetId: string;
    type: ProductOptionTypeEnum;
    values: OrderLineOptionValue[];
}
export interface OrderLineOptionValue {
    name: string | null;
    price: number | null;
    value: string;
}
export interface OrderLineVariant {
    barcodeList: string[] | null;
    baseUnit: OrderLineBaseUnit | null;
    brand: OrderLineVariantBrand | null;
    bundleProducts: OrderLineVariantBundleProductModel[] | null;
    categories: OrderLineVariantCategory[] | null;
    hsCode: string | null;
    id: string | null;
    mainImageId: string | null;
    name: string;
    prices: OrderLineVariantPrice[] | null;
    productId: string | null;
    sku: string | null;
    slug: string | null;
    tagIds: string[] | null;
    tags: OrderLineVariantTag[] | null;
    taxValue: number | null;
    type: number | null;
    unit: OrderLineVariantUnit | null;
    variantValues: OrderLineVariantVariantValues[] | null;
    weight: number | null;
}
export interface OrderLineVariantBrand {
    id: string;
    name: string;
}
export interface OrderLineVariantBundleProductModel {
    deleted: boolean | null;
    discountPrice: number | null;
    discountRatio: number | null;
    finalPrice: number | null;
    order: number;
    price: number;
    quantity: number;
    taxValue: number | null;
    variant: OrderLineBundleVariant;
}
export interface OrderLineVariantCategory {
    categoryPath: OrderLineVariantCategoryPath[] | null;
    id: string;
    name: string;
}
export interface OrderLineVariantCategoryPath {
    id: string;
    name: string;
}
export interface OrderLineVariantPrice {
    buyPrice: number | null;
    currency: string | null;
    currencySymbol: string | null;
    discountPrice: number | null;
    priceListId: string | null;
    sellPrice: number;
    unitPrice: number | null;
}
export interface OrderLineVariantTag {
    id: string;
    name: string;
}
export interface OrderLineVariantUnit {
    amount: number;
    type: ProductUnitTypeEnum;
}
export interface OrderLineVariantUnitType {
    id: string;
    name: string;
}
export interface OrderLineVariantVariantValues {
    order: number;
    variantTypeId: string;
    variantTypeName: string | null;
    variantValueId: string;
    variantValueName: string | null;
}
export interface OrderPackage {
    createdAt: any | null;
    deleted: boolean | null;
    errorMessage: string | null;
    id: string;
    note: string | null;
    orderLineItemIds: string[];
    orderPackageFulfillStatus: OrderPackageFulfillStatusEnum;
    orderPackageNumber: string;
    stockLocationId: string;
    trackingInfo: TrackingInfo | null;
    updatedAt: any | null;
}
export interface OrderPaymentMethod {
    paymentGatewayCode: string | null;
    paymentGatewayId: string | null;
    paymentGatewayName: string | null;
    price: number;
    type: PaymentMethodTypeEnum;
}
export interface OrderRefundSettings {
    autoApprove: boolean;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    isActiveRefundSection: boolean;
    orderRefundDayLimit: number | null;
    refundDesc: string;
    storefrontId: string | null;
    updatedAt: any | null;
}
export interface OrderSessionInfo {
    countryCode: string | null;
    durationMS: number | null;
    end: any | null;
    host: string | null;
    ip: string | null;
    referer: string | null;
    salesChannelId: string | null;
    sessionId: string | null;
    start: any | null;
    storefrontId: string | null;
    trafficSource: OrderSessionInfoTrafficSource | null;
    userAgent: OrderSessionUserAgent | null;
    utm: OrderSessionUTM | null;
    visitorId: string | null;
}
export interface OrderSessionInfoTrafficSource {
    source: string | null;
    type: SFAnalyticsTrafficSourceEnum;
}
export interface OrderSessionUserAgent {
    deviceType: UserAgentDeviceType;
    name: string;
    os: string;
}
export interface OrderSessionUTM {
    campaign: string | null;
    content: string | null;
    medium: string | null;
    source: string | null;
    term: string | null;
}
export interface OrderShippingLine {
    finalPrice: number;
    isRefunded: boolean | null;
    paymentMethod: PaymentMethodTypeEnum | null;
    price: number;
    shippingSettingsId: string | null;
    shippingZoneRateId: string | null;
    taxValue: number | null;
    title: string;
}
export interface OrderStorefrontRouting {
    domain: string | null;
    dynamicCurrencySettings: OrderStorefrontRoutingDynamicCurrencySettings | null;
    id: string;
    locale: string | null;
    path: string | null;
    priceListId: string | null;
}
export interface OrderStorefrontRoutingDynamicCurrencySettings {
    roundingFormat: string | null;
    targetCurrencyCode: string;
}
export interface OrderTaxLine {
    price: number;
    rate: number;
}
export interface PaymentGateway {
    additionalPrices: AdditionalPrice[] | null;
    availableCountries: string[] | null;
    code: string;
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    id: string;
    isPassive: boolean | null;
    logoUrl: string | null;
    masterPassClientId: string | null;
    name: string;
    paymentGatewayProviderId: string | null;
    paymentMethodType: PaymentMethodTypeEnum;
    paymentMethods: PaymentGatewayPaymentMethod[];
    settings: PaymentGatewaySettings[] | null;
    supportedCurrencies: string[] | null;
    testMode: boolean | null;
    translations: PaymentGatewayTranslation[] | null;
    type: PaymentGatewayTypeEnum;
    updatedAt: any | null;
}
export interface PaymentGatewayPaymentMethod {
    logoUrl: string | null;
    name: string;
}
export interface PaymentGatewaySettings {
    label: string;
    order: number;
    type: PaymentGatewaySettingsTypeEnum;
    value: string | null;
}
export interface PaymentGatewayTranslation {
    description: string | null;
    locale: string | null;
    name: string | null;
}
export interface ProductAttribute {
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    id: string;
    name: string;
    options: ProductAttributeOption[] | null;
    tableTemplate: ProductAttributeTableTemplate | null;
    translations: ProductAttributeTranslation[] | null;
    type: ProductAttributeTypeEnum;
    updatedAt: any | null;
}
export interface ProductAttributeOption {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    updatedAt: any | null;
}
export interface ProductAttributeOptionTranslation {
    id: string;
    name: string | null;
}
export interface ProductAttributeTableCellData {
    id: string;
    name: string;
}
export interface ProductAttributeTableTemplate {
    columns: ProductAttributeTableCellData[];
    rows: ProductAttributeTableCellData[];
}
export interface ProductAttributeTranslation {
    description: string | null;
    locale: string;
    name: string | null;
    options: ProductAttributeOptionTranslation[] | null;
}
export interface ProductBackInStockRemind {
    createdAt: any | null;
    customerId: string;
    deleted: boolean | null;
    email: string;
    id: string;
    productId: string;
    storefrontId: string;
    storefrontRoutingId: string | null;
    updatedAt: any | null;
    variantId: string;
}
export interface ProductBrand {
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    id: string;
    imageId: string | null;
    metaData: HTMLMetaData | null;
    name: string;
    orderType: CategoryProductsOrderTypeEnum | null;
    salesChannelIds: string[] | null;
    translations: ProductBrandTranslation[] | null;
    updatedAt: any | null;
}
export interface ProductBrandPaginationResponse {
    count: number;
    data: ProductBrand[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface ProductBrandTranslation {
    description: string | null;
    locale: string;
    name: string | null;
}
export interface ProductFacetCount {
    id: string;
    values: ProductFacetCountValue[];
}
export interface ProductFacetCountValue {
    count: number;
    id: string;
}
export interface ProductFilterData {
    categories: Category[] | null;
    filters: ProductFilterDataFilter[];
}
export interface ProductFilterDataFilter {
    categories: Category[] | null;
    customValues: string[] | null;
    displayType: ProductFilterDisplayTypeEnum;
    id: string;
    isFacetFilter: boolean | null;
    isMultiSelect: boolean;
    key: string;
    name: string;
    order: number;
    settings: ProductFilterSettings | null;
    type: ProductFilterTypeEnum;
    values: ApplicableProductFilterValue[] | null;
}
export interface ProductFilterSettings {
    customSortedValues: string[] | null;
    showCollapsedOnDesktop: boolean;
    showCollapsedOnMobile: boolean;
    sortType: ProductFilterSortTypeEnum;
    useAndFilter: boolean | null;
}
export interface ProductItem {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    productId: string;
    updatedAt: any | null;
    variantId: string;
}
export interface ProductLastViewed {
    createdAt: any | null;
    customerId: string;
    deleted: boolean | null;
    id: string;
    products: ProductItem[];
    updatedAt: any | null;
}
export interface ProductOption {
    createdAt: any | null;
    dateSettings: ProductOptionDateSettings | null;
    deleted: boolean | null;
    fileSettings: ProductOptionFileSettings | null;
    id: string;
    isOptional: boolean | null;
    name: string;
    optionalText: string | null;
    order: number;
    otherPrices: ProductOptionSelectValueOtherPrice[] | null;
    price: number | null;
    requiredOptionId: string | null;
    requiredOptionValueIds: string[] | null;
    selectSettings: ProductOptionSelectSettings | null;
    textSettings: ProductOptionTextSettings | null;
    type: ProductOptionTypeEnum;
    updatedAt: any | null;
}
export interface ProductOptionDateSettings {
    max: any | null;
    maxRelativeNextDate: number | null;
    min: any | null;
    minRelativeNextDate: number | null;
}
export interface ProductOptionFileSettings {
    allowedExtensions: string[] | null;
    maxQuantity: number | null;
    minQuantity: number | null;
}
export interface ProductOptionSelectSettings {
    maxSelect: number | null;
    minSelect: number | null;
    type: ProductOptionSelectTypeEnum;
    values: ProductOptionSelectValue[];
}
export interface ProductOptionSelectValue {
    colorCode: string | null;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    order: number;
    otherPrices: ProductOptionSelectValueOtherPrice[] | null;
    price: number | null;
    thumbnailImageId: string | null;
    updatedAt: any | null;
    value: string;
}
export interface ProductOptionSelectValueOtherPrice {
    currencyCode: string;
    currencySymbol: string | null;
    price: number;
}
export interface ProductOptionSelectValueTranslations {
    id: string;
    value: string | null;
}
export interface ProductOptionSet {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    options: ProductOption[];
    translations: ProductOptionSetTranslations[] | null;
    updatedAt: any | null;
}
export interface ProductOptionSetTranslations {
    locale: string;
    options: ProductOptionTranslations[] | null;
}
export interface ProductOptionTextSettings {
    max: number | null;
    min: number | null;
}
export interface ProductOptionTranslations {
    id: string;
    name: string | null;
    optionalText: string | null;
    values: ProductOptionSelectValueTranslations[] | null;
}
export interface ProductSearchCustomerReviewSummaries {
    averageRating: number | null;
    reviewCount: number | null;
    stars: SearchProductCustomerReviewStar[] | null;
    storefrontId: string | null;
}
export interface ProductSearchResponse {
    count: number;
    data: any;
    facets: ProductFacetCount[] | null;
    limit: number;
    page: number;
    results: SearchProduct[];
    totalCount: number;
}
export interface ProductTagTranslation {
    description: string | null;
    locale: string;
    name: string | null;
}
export interface ProductTranslation {
    description: string | null;
    locale: string;
    name: string | null;
}
export interface ProductUnitTranslation {
    description: string | null;
    locale: string;
    name: string | null;
}
export interface RaffleDateRangeField {
    end: any | null;
    start: any | null;
}
export interface RaffleMetadata {
    canonicals: string[] | null;
    createdAt: any | null;
    deleted: boolean | null;
    description: string | null;
    disableIndex: boolean | null;
    id: string;
    pageTitle: string | null;
    slug: string;
    targetId: string | null;
    targetType: RaffleMetadataTargetTypeEnum | null;
    updatedAt: any | null;
}
export interface RafflePaginationResponse {
    count: number;
    data: StorefrontRaffle[];
    hasNext: boolean;
    limit: number;
    page: number;
}
export interface RaffleParticipants {
    applicationDate: any;
    appliedProduct: AppliedProduct;
    createdAt: any | null;
    customerId: string | null;
    deleted: boolean | null;
    email: string;
    extraData: any | null;
    firstName: string;
    fullName: string;
    id: string;
    isDeliveredCargo: boolean | null;
    lastName: string;
    phone: string | null;
    raffle: StorefrontRaffle | null;
    raffleId: string;
    status: RaffleParticipantStatusEnum | null;
    updatedAt: any | null;
}
export interface RaffleVariantInformation {
    productId: string;
    variantId: string;
}
export interface RetrieveInstallmentInfoResponse {
    bankName: string | null;
    binNumber: string;
    cardAssociation: TransactionCardAssociationEnum | null;
    cardFamily: string | null;
    cardType: TransactionCardTypeEnum | null;
    installmentPrices: TransactionInstallmentPrice[] | null;
    price: number;
}
export interface SearchCategory {
    id: string;
    name: string;
    path: SearchCategoryPath[];
    slug: string | null;
    translations: CategoryTranslation[] | null;
}
export interface SearchCategoryPath {
    id: string;
    name: string;
    slug: string | null;
    translations: CategoryTranslation[] | null;
}
export interface SearchHTMLMetaData {
    canonicals: string[] | null;
    description: string | null;
    disableIndex: boolean | null;
    metadataOverrides: SearchHTMLMetaDataOverride[] | null;
    pageTitle: string | null;
    redirectTo: string | null;
    slug: string;
    translations: HTMLMetaDataTranslation[] | null;
}
export interface SearchHTMLMetaDataOverride {
    description: string;
    language: string | null;
    pageTitle: string;
    storefrontId: string | null;
    storefrontRegionId: string | null;
}
export interface SearchProduct {
    attributes: SearchProductAttributeValue[] | null;
    averageRating: number | null;
    baseUnit: SearchProductProductBaseUnit | null;
    brand: SearchProductBrand | null;
    campaigns: SearchProductCampaign[] | null;
    categories: SearchCategory[] | null;
    createdAt: any | null;
    customerReviewSummaries: ProductSearchCustomerReviewSummaries | null;
    deleted: boolean | null;
    description: string | null;
    groupVariantsByVariantTypeId: string | null;
    hiddenSalesChannelIds: string[] | null;
    id: string;
    metaData: SearchHTMLMetaData | null;
    name: string;
    productOptionSetId: string | null;
    productVariantTypes: SearchProductVariantType[];
    reviewCount: number | null;
    salesChannelIds: string[] | null;
    shortDescription: string | null;
    stars: SearchProductCustomerReviewStar[] | null;
    tags: SearchProductTag[] | null;
    translations: ProductTranslation[] | null;
    type: string;
    updatedAt: any | null;
    variants: SearchVariant[];
    weight: number | null;
}
export interface SearchProductAttribute {
    id: string;
    name: string;
    tableTemplate: SearchProductAttributeTableTemplate | null;
    translations: ProductAttributeTranslation[] | null;
    type: string;
}
export interface SearchProductAttributeOption {
    id: string;
    name: string;
}
export interface SearchProductAttributeTableCellData {
    id: string;
    name: string;
}
export interface SearchProductAttributeTableTemplate {
    columns: SearchProductAttributeTableCellData[];
    rows: SearchProductAttributeTableCellData[];
}
export interface SearchProductAttributeValue {
    imageIds: string[] | null;
    productAttribute: SearchProductAttribute | null;
    productAttributeOption: SearchProductAttributeOption | null;
    value: string | null;
}
export interface SearchProductBrand {
    id: string;
    name: string;
    slug: string | null;
    translations: ProductBrandTranslation[] | null;
}
export interface SearchProductCampaign {
    buyXThenGetY: SearchProductCampaignBuyXThenGetY | null;
    currencyCodes: string[] | null;
    dateRange: SearchProductCampaignDateRangeField | null;
    fixedDiscount: SearchProductCampaignFixedDiscount | null;
    salesChannelIds: string[] | null;
    title: string;
    type: CampaignTypeEnum;
}
export interface SearchProductCampaignBuyX {
    amount: number;
    applyByQuantity: boolean;
}
export interface SearchProductCampaignBuyXThenGetY {
    buyX: SearchProductCampaignBuyX;
    getY: SearchProductCampaignGetY;
    maxUsagePerOrder: number | null;
}
export interface SearchProductCampaignDateRangeField {
    end: any | null;
    start: any | null;
}
export interface SearchProductCampaignFixedDiscount {
    amount: number | null;
}
export interface SearchProductCampaignGetY {
    amount: number;
    discountRatio: number;
}
export interface SearchProductCustomerReviewStar {
    count: number;
    star: number;
}
export interface SearchProductImage {
    fileName: string | null;
    id: string;
    isMain: boolean | null;
    isVideo: boolean | null;
    order: number;
}
export interface SearchProductPrice {
    buyPrice: number | null;
    currency: string | null;
    currencyCode: string | null;
    currencySymbol: string | null;
    discountPrice: number | null;
    priceListId: string | null;
    sellPrice: number;
    unitPrice: number | null;
}
export interface SearchProductProductBaseUnit {
    baseAmount: number;
    type: ProductUnitTypeEnum;
    unit: SearchProductProductUnit | null;
}
export interface SearchProductProductUnit {
    id: string;
    name: string;
    translations: ProductUnitTranslation[] | null;
}
export interface SearchProductStockLocation {
    stockCount: number;
    stockLocationId: string;
}
export interface SearchProductTag {
    id: string;
    name: string;
    translations: ProductTagTranslation[] | null;
}
export interface SearchProductVariantType {
    order: number;
    variantType: SearchVariantType;
    variantValueIds: string[];
}
export interface SearchVariant {
    attributes: SearchProductAttributeValue[] | null;
    barcodeList: string[] | null;
    bundleSettings: BundleSettingsModel | null;
    deleted: boolean | null;
    id: string;
    images: SearchProductImage[] | null;
    isActive: boolean | null;
    prices: SearchProductPrice[] | null;
    sellIfOutOfStock: boolean | null;
    sku: string | null;
    stocks: SearchProductStockLocation[] | null;
    unit: VariantUnitModel | null;
    variantValues: SearchVariationValueRelation[] | null;
    weight: number | null;
}
export interface SearchVariantType {
    id: string;
    name: string;
    selectionType: string;
    translations: VariantTypeTranslation[] | null;
    values: SearchVariantValue[];
}
export interface SearchVariantValue {
    colorCode: string | null;
    id: string;
    name: string;
    thumbnailImageId: string | null;
}
export interface SearchVariationValueRelation {
    variantTypeId: string;
    variantValueId: string;
}
export interface ShippingZoneRegion {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    updatedAt: any | null;
}
export interface SocialLoginSettings {
    apiKey: string | null;
    apiSecret: string | null;
    provider: CustomerSocialLoginProviderEnum;
}
export interface State {
    countryId: string;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    locationTranslations: LocationTranslations | null;
    name: string;
    native: string | null;
    stateCode: string | null;
    updatedAt: any | null;
}
export interface StockLocation {
    address: StockLocationAddress | null;
    createdAt: any | null;
    deleted: boolean | null;
    deliveryTime: StockLocationDeliveryTimeEnum | null;
    description: string | null;
    id: string;
    isRemindOutOfStockEnabled: boolean | null;
    name: string;
    outOfStockMailList: string[] | null;
    type: StockLocationTypeEnum | null;
    updatedAt: any | null;
}
export interface StockLocationAddress {
    address: string | null;
    city: StockLocationAddressCity | null;
    country: StockLocationAddressCountry | null;
    district: StockLocationAddressDistrict | null;
    phone: string | null;
    postalCode: string | null;
    state: StockLocationAddressState | null;
}
export interface StockLocationAddressCity {
    code: string | null;
    id: string | null;
    name: string;
}
export interface StockLocationAddressCountry {
    code: string | null;
    id: string | null;
    name: string;
}
export interface StockLocationAddressDistrict {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface StockLocationAddressState {
    code: string | null;
    id: string | null;
    name: string | null;
}
export interface Storefront {
    analytics4Id: string | null;
    createdAt: any | null;
    deleted: boolean | null;
    domains: StorefrontDomain[] | null;
    emailSettingsId: string | null;
    fbAccessToken: string | null;
    fbpId: string | null;
    gtmId: string | null;
    id: string;
    localizations: StorefrontLocalization[];
    mainStorefrontThemeId: string | null;
    metaTemplates: StorefrontMetaTemplate[] | null;
    name: string;
    pickUpStockLocationIds: string[] | null;
    robotsTxt: string | null;
    routings: StorefrontRouting[];
    salesChannelId: string;
    socialLoginSettings: SocialLoginSettings[] | null;
    status: StorefrontStatusTypes;
    themes: StorefrontTheme[];
    tiktokPixelId: string | null;
    token: string | null;
    universalAnalyticsId: string | null;
    updatedAt: any | null;
}
export interface StorefrontCheckboxSettings {
    checkboxTypes: StorefrontRegisterSettingsCheckboxType[] | null;
    content: string;
    storefrontPolicyId: string;
}
export interface StorefrontCheckoutFooterSettings {
    storefrontPolicyIdList: string[];
}
export interface StorefrontCheckoutMarketingSettings {
    content: string;
    storefrontPolicyId: string;
}
export interface StorefrontCheckoutSettings {
    checkoutCheckboxSettings: StorefrontCheckboxSettings[] | null;
    checkoutFooterSettings: StorefrontCheckoutFooterSettings | null;
    checkoutMarketingSettings: StorefrontCheckoutMarketingSettings | null;
}
export interface StorefrontDomain {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    isDefault: boolean | null;
    merchantDomainId: string;
    name: string;
    redirectDomainName: string | null;
    updatedAt: any | null;
}
export interface StorefrontDynamicCurrencySettings {
    roundingFormat: string | null;
    targetCurrencyCode: string;
    targetCurrencySymbol: string | null;
}
export interface StorefrontFormSettings {
    checkoutSettings: StorefrontCheckoutSettings | null;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    locale: string;
    mailSettingsList: StorefrontMailSettings[] | null;
    name: string;
    registerSettingsList: StorefrontCheckboxSettings[] | null;
    storefrontRoutings: StorefrontFormSettingsRouting[];
    updatedAt: any | null;
}
export interface StorefrontFormSettingsRouting {
    assignedRoutings: string[] | null;
    storefrontId: string;
}
export interface StorefrontLocalization {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    isDefault: boolean;
    locale: string;
    name: string;
    updatedAt: any | null;
}
export interface StorefrontMailSettings {
    countryIds: string[] | null;
    emailTemplates: TemplateEnum[] | null;
    storefrontPolicyId: string;
}
export interface StorefrontMetaTemplate {
    descriptionTemplate: string | null;
    locale: string | null;
    pageType: StorefrontPageTypesEnum | null;
    titleTemplate: string | null;
}
export interface StorefrontOrder {
    billingAddress: OrderAddress | null;
    cancelReason: OrderCancelledReasonEnum | null;
    cancelledAt: any | null;
    createdAt: any | null;
    currencyCode: string;
    currencyRates: OrderCurrencyRate[];
    currencySymbol: string | null;
    customer: OrderCustomer | null;
    customerId: string | null;
    deleted: boolean | null;
    giftPackageLines: OrderGiftPackageLine[] | null;
    giftPackageNote: string | null;
    id: string;
    invoices: Invoice[] | null;
    isGiftPackage: boolean | null;
    merchantId: string;
    note: string | null;
    orderAdjustments: OrderAdjustment[] | null;
    orderLineItems: OrderLineItem[];
    orderNumber: string | null;
    orderPackageStatus: OrderPackageStatusEnum | null;
    orderPackages: OrderPackage[] | null;
    orderPaymentStatus: OrderPaymentStatusEnum | null;
    orderTagIds: string[] | null;
    orderedAt: any | null;
    paymentMethods: OrderPaymentMethod[] | null;
    shippingAddress: OrderAddress | null;
    shippingLines: OrderShippingLine[] | null;
    shippingMethod: OrderShippingMethodEnum;
    status: OrderStatusEnum;
    taxLines: OrderTaxLine[] | null;
    totalFinalPrice: number;
    totalPrice: number;
    updatedAt: any | null;
}
export interface StorefrontPolicy {
    createdAt: any | null;
    currentVersionId: string;
    deleted: boolean | null;
    id: string;
    locale: string;
    name: string;
    slug: string;
    storefrontRoutings: StorefrontPolicyRouting[];
    updatedAt: any | null;
}
export interface StorefrontPolicyRouting {
    assignedRoutings: string[] | null;
    storefrontId: string;
}
export interface StorefrontRaffle {
    createdAt: any | null;
    dateRange: RaffleDateRangeField | null;
    deleted: boolean | null;
    id: string;
    metadata: RaffleMetadata;
    name: string;
    requiredCustomerAccount: boolean;
    status: boolean;
    updatedAt: any | null;
    variants: RaffleVariantInformation[];
    verificationType: VerificationTypeEnum;
}
export interface StorefrontRouting {
    countryCodes: string[] | null;
    createdAt: any | null;
    currencyCode: string | null;
    currencySymbol: string | null;
    deleted: boolean | null;
    domain: string | null;
    dynamicCurrencySettings: StorefrontDynamicCurrencySettings | null;
    id: string;
    locale: string;
    path: string | null;
    priceListId: string | null;
    updatedAt: any | null;
}
export interface StorefrontTheme {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    isMainTheme: boolean;
    name: string;
    status: StorefrontThemeStatus;
    themeId: string;
    themeVersionId: string;
    updatedAt: any | null;
}
export interface StorefrontTransaction {
    amount: number;
    checkoutId: string | null;
    createdAt: any | null;
    currencyCode: string;
    currencySymbol: string | null;
    customerId: string | null;
    deleted: boolean | null;
    error: TransactionError | null;
    id: string;
    orderId: string | null;
    paymentGatewayCode: string | null;
    paymentGatewayId: string;
    paymentGatewayName: string;
    paymentMethod: PaymentMethodTypeEnum | null;
    paymentMethodDetail: TransactionPaymentMethodDetail | null;
    processedAt: any | null;
    refundReason: string | null;
    status: TransactionStatusEnum;
    type: TransactionTypeEnum;
    updatedAt: any | null;
}
export interface Town {
    createdAt: any | null;
    deleted: boolean | null;
    districtId: string;
    id: string;
    name: string;
    order: number | null;
    updatedAt: any | null;
}
export interface TrackingInfo {
    barcode: string | null;
    cargoCompany: string | null;
    isSendNotification: boolean | null;
    trackingLink: string | null;
    trackingNumber: string | null;
}
export interface TransactionError {
    code: string | null;
    declineCode: string | null;
    message: string | null;
}
export interface TransactionInstallmentPrice {
    installmentCount: number | null;
    installmentPrice: number | null;
    originalRate: number | null;
    rate: number | null;
    totalPrice: number | null;
}
export interface TransactionPaymentMethodDetail {
    bankName: string | null;
    binNumber: string;
    cardAssociation: TransactionCardAssociationEnum | null;
    cardFamily: string | null;
    cardType: TransactionCardTypeEnum | null;
    installment: TransactionInstallmentPrice | null;
    lastFourDigits: string;
    paymentMethodName: string | null;
    threeDSecure: boolean | null;
}
export interface TransactionResponse {
    error: TransactionError | null;
    orderId: string | null;
    orderNumber: string | null;
    returnSlug: string | null;
    sessionToken: string | null;
    transactionId: string | null;
    transactionStatus: TransactionStatusEnum;
}
export interface VariantType {
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    selectionType: VariantSelectionTypeEnum;
    translations: VariantTypeTranslation[] | null;
    updatedAt: any | null;
    values: VariantValue[];
}
export interface VariantTypeTranslation {
    locale: string;
    name: string | null;
    values: VariantValueTranslation[] | null;
}
export interface VariantUnitModel {
    amount: number | null;
    type: ProductUnitTypeEnum;
}
export interface VariantValue {
    colorCode: string | null;
    createdAt: any | null;
    deleted: boolean | null;
    id: string;
    name: string;
    thumbnailImageId: string | null;
    updatedAt: any | null;
}
export interface VariantValueTranslation {
    id: string;
    name: string | null;
}
export interface AddItemToCartInput {
    cartId?: string | null;
    item: CartLineItemInput;
    options?: CartLineOptionInput[] | null;
    priceListId?: string | null;
    salesChannelId: string;
    storefrontThemeId: string;
}
export interface AppliedProductInput {
    productId?: string | null;
    variantId: string;
}
export interface BlogMetadataTargetTypeEnumFilter {
    eq?: BlogMetadataTargetTypeEnum | null;
    in?: BlogMetadataTargetTypeEnum[] | null;
    ne?: BlogMetadataTargetTypeEnum | null;
    nin?: BlogMetadataTargetTypeEnum[] | null;
}
export interface BooleanFilterInput {
    eq?: boolean | null;
}
export interface BundleProductInput {
    quantity: number;
    variantId: string;
}
export interface CartLineItemInput {
    id?: string | null;
    quantity: number;
    variant: CartLineVariantInput;
}
export interface CartLineOptionInput {
    productOptionId: string;
    productOptionsSetId: string;
    values: string[];
}
export interface CartLineVariantInput {
    bundleProducts?: BundleProductInput[] | null;
    id: string;
    name?: string | null;
}
export interface CategoryPathFilterInput {
    in?: string[] | null;
}
export interface CheckoutCustomerInput {
    email?: string | null;
    firstName?: string | null;
    id?: string | null;
    lastName?: string | null;
    notificationsAccepted?: boolean | null;
}
export interface CheckStocksLineInput {
    productId: string;
    quantity: number;
    variantId: string;
}
export interface CreateCustomerEmailSubscriptionInput {
    captchaToken?: string | null;
    createdAt?: any | null;
    deleted?: boolean | null;
    email: string;
    firstName?: string | null;
    id?: string | null;
    lastName?: string | null;
    updatedAt?: any | null;
}
export interface CreateCustomerReviewInput {
    comment?: string | null;
    createdAt?: any | null;
    customerId?: string | null;
    deleted?: boolean | null;
    email?: string | null;
    firstName?: string | null;
    id?: string | null;
    lastName?: string | null;
    orderId?: string | null;
    orderNumber?: string | null;
    productId: string;
    salesChannelId: string;
    star: number;
    title?: string | null;
    updatedAt?: any | null;
}
export interface CreateSaleTransactionMasterPassPaymentMethodDetail {
    phoneNumber?: string | null;
    savedCardName?: string | null;
}
export interface CreateSaleTransactionWithCartInput {
    cartId: string;
    masterPassDetail?: CreateSaleTransactionMasterPassPaymentMethodDetail | null;
    paymentGatewayId: string;
    paymentMethodDetail?: PaymentMethodDetailInput | null;
}
export interface CreateSaleTransactionWithCheckoutInput {
    checkoutId: string;
    masterPassDetail?: CreateSaleTransactionMasterPassPaymentMethodDetail | null;
    paymentGatewayId: string;
    paymentMethodDetail?: PaymentMethodDetailInput | null;
}
export interface CustomerAddressCityInput {
    code?: string | null;
    id?: string | null;
    name: string;
}
export interface CustomerAddressCountryInput {
    code?: string | null;
    id?: string | null;
    iso2?: string | null;
    iso3?: string | null;
    name: string;
}
export interface CustomerAddressDistrictInput {
    code?: string | null;
    id?: string | null;
    name?: string | null;
}
export interface CustomerAddressStateInput {
    code?: string | null;
    id?: string | null;
    name?: string | null;
}
export interface CustomerAttributeValueInput {
    customerAttributeId?: string | null;
    customerAttributeOptionId?: string | null;
    value?: string | null;
}
export interface DateFilterInput {
    eq?: any | null;
    gt?: any | null;
    gte?: any | null;
    in?: any[] | null;
    lt?: any | null;
    lte?: any | null;
    ne?: any | null;
    nin?: any[] | null;
}
export interface GetOrderLineFile {
    url: string;
}
export interface GetProductCampaignsInput {
    customerGroupIds?: string[] | null;
    salesChannelId: string;
    variantIds: string[];
}
export interface HTMLMetaDataTargetTypeEnumFilter {
    eq?: HTMLMetaDataTargetTypeEnum | null;
    in?: HTMLMetaDataTargetTypeEnum[] | null;
    ne?: HTMLMetaDataTargetTypeEnum | null;
    nin?: HTMLMetaDataTargetTypeEnum[] | null;
}
export interface ListCustomerReviewInput {
    salesChannelId: string;
}
export interface OrderAddressCityInput {
    code?: string | null;
    id?: string | null;
    name: string;
}
export interface OrderAddressCountryInput {
    code?: string | null;
    id?: string | null;
    iso2?: string | null;
    iso3?: string | null;
    name: string;
}
export interface OrderAddressDistrictInput {
    code?: string | null;
    id?: string | null;
    name?: string | null;
}
export interface OrderAddressInput {
    addressLine1: string;
    addressLine2?: string | null;
    city: OrderAddressCityInput;
    company?: string | null;
    country: OrderAddressCountryInput;
    district?: OrderAddressDistrictInput | null;
    firstName: string;
    id?: string | null;
    identityNumber?: string | null;
    isDefault: boolean;
    lastName: string;
    phone?: string | null;
    postalCode?: string | null;
    region?: ShippingZoneRegionInput | null;
    state?: OrderAddressStateInput | null;
    taxNumber?: string | null;
    taxOffice?: string | null;
}
export interface OrderAddressStateInput {
    code?: string | null;
    id?: string | null;
    name?: string | null;
}
export interface OrderAdjustmentInput {
    amount: number;
    amountType: OrderAmountTypeEnum;
    campaignId?: string | null;
    couponId?: string | null;
    name: string;
    order: number;
    type: OrderAdjustmentEnum;
}
export interface OrderRefundOrderLineInput {
    orderLineItemId: string;
    quantity: number;
}
export interface OrderRefundRequestInput {
    orderId: string;
    orderLineItems: OrderRefundOrderLineInput[];
    reason?: string | null;
}
export interface PaginationInput {
    limit?: number | null;
    page?: number | null;
}
export interface PaymentMethodDetailInput {
    cardHolderName: string;
    cardNumber: string;
    cvv: string;
    expiredMonth: number;
    expiredYear: number;
    installmentCount: number;
    threeDSecure: boolean;
}
export interface ProductBackInStockRemindInput {
    email: string;
    productId: string;
    variantId: string;
}
export interface ProductItemInput {
    createdAt?: any | null;
    deleted?: boolean | null;
    id?: string | null;
    productId: string;
    updatedAt?: any | null;
    variantId: string;
}
export interface ProductLastViewedInput {
    createdAt?: any | null;
    customerId: string;
    deleted?: boolean | null;
    id?: string | null;
    products: ProductItemInput[];
    updatedAt?: any | null;
}
export interface RaffleMetadataTargetTypeEnumFilter {
    eq?: RaffleMetadataTargetTypeEnum | null;
    in?: RaffleMetadataTargetTypeEnum[] | null;
    ne?: RaffleMetadataTargetTypeEnum | null;
    nin?: RaffleMetadataTargetTypeEnum[] | null;
}
export interface RaffleParticipantsInput {
    appliedProduct: AppliedProductInput;
    email: string;
    extraData?: any | null;
    firstName: string;
    lastName: string;
    phone?: string | null;
    raffleId: string;
}
export interface RetrieveInstallmentInfoInput {
    binNumber: string;
    paymentGatewayId: string;
    price: number;
}
export interface SaveCartInput {
    billingAddress?: OrderAddressInput | null;
    couponCode?: string | null;
    createdAt?: any | null;
    customer?: CheckoutCustomerInput | null;
    deleted?: boolean | null;
    giftPackageNote?: string | null;
    id?: string | null;
    isGiftPackage?: boolean | null;
    note?: string | null;
    shippingAddress?: OrderAddressInput | null;
    shippingSettingsId?: string | null;
    shippingZoneRateId?: string | null;
    stockLocationId?: string | null;
    updatedAt?: any | null;
}
export interface SaveCheckoutInput {
    billingAddress?: OrderAddressInput | null;
    cartId: string;
    couponCode?: string | null;
    createdAt?: any | null;
    customer?: CheckoutCustomerInput | null;
    deleted?: boolean | null;
    giftPackageNote?: string | null;
    id?: string | null;
    isGiftPackage?: boolean | null;
    note?: string | null;
    orderAdjustments?: OrderAdjustmentInput[] | null;
    shippingAddress?: OrderAddressInput | null;
    shippingMethod: OrderShippingMethodEnum;
    shippingSettingsId?: string | null;
    shippingZoneRateId?: string | null;
    stockLocationId?: string | null;
    updatedAt?: any | null;
}
export interface SaveItemToCartInput {
    cartId?: string | null;
    customerId?: string | null;
    item: CartLineItemInput;
    options?: CartLineOptionInput[] | null;
    priceListId?: string | null;
    salesChannelId: string;
    storefrontId: string;
    storefrontRoutingId: string;
    storefrontThemeId: string;
}
export interface SaveMyCustomerAddressInput {
    addressLine1: string;
    addressLine2?: string | null;
    city: CustomerAddressCityInput;
    company?: string | null;
    country: CustomerAddressCountryInput;
    createdAt?: any | null;
    deleted?: boolean | null;
    district?: CustomerAddressDistrictInput | null;
    firstName: string;
    id?: string | null;
    identityNumber?: string | null;
    isDefault?: boolean | null;
    lastName: string;
    phone?: string | null;
    postalCode?: string | null;
    state?: CustomerAddressStateInput | null;
    taxNumber?: string | null;
    taxOffice?: string | null;
    title: string;
    updatedAt?: any | null;
}
export interface SaveMyCustomerInput {
    addresses?: SaveMyCustomerAddressInput[] | null;
    attributes?: CustomerAttributeValueInput[] | null;
    firstName: string;
    lastName: string;
    phone?: string | null;
    subscriptionStatus?: CustomerEmailSubscriptionStatusesEnum | null;
}
export interface SearchDynamicCurrencySettings {
    roundingFormat?: string | null;
    targetCurrencyCode: string;
}
export interface SearchInput {
    barcodeList?: string[] | null;
    brandId?: string | null;
    brandIdList?: string[] | null;
    categoryIdList?: string[] | null;
    dynamicCurrencySettings?: SearchDynamicCurrencySettings | null;
    facetList?: SearchInputFacetListInput[] | null;
    filterList?: SearchInputFilterListInput[] | null;
    locale?: string | null;
    order?: SearchInputOrderByInput[] | null;
    page?: number | null;
    perPage?: number | null;
    priceListId?: string | null;
    productIdList?: string[] | null;
    query?: string | null;
    salesChannelId?: string | null;
    showStockOption?: ProductSearchShowStockOptionEnum | null;
    slug?: string | null;
    storefrontId?: string | null;
    tagIdList?: string[] | null;
    vendorIdList?: string[] | null;
}
export interface SearchInputFacetListInput {
    displayType: ProductFilterDisplayTypeEnum;
    id: string;
    type: ProductFilterTypeEnum;
}
export interface SearchInputFilterListInput {
    displayType?: ProductFilterDisplayTypeEnum | null;
    id: string;
    type: ProductFilterTypeEnum;
    useAndFilter?: boolean | null;
    valueList: string[];
}
export interface SearchInputOrderByInput {
    direction: SortByDirectionEnum;
    type: SortByTypeEnum;
}
export interface ShippingZoneRegionInput {
    createdAt?: any | null;
    deleted?: boolean | null;
    id?: string | null;
    name: string;
    updatedAt?: any | null;
}
export interface StringFilterInput {
    eq?: string | null;
    in?: string[] | null;
    like?: string | null;
    ne?: string | null;
    nin?: string[] | null;
}
export interface SubscribeToMarketingNotificationsInput {
    captchaToken?: string | null;
    email: string;
    firstName?: string | null;
    lastName?: string | null;
}
export interface UpdateCartCampaignOfferInput {
    accepted: boolean;
    campaignOfferId: string;
    campaignOfferProductId: string;
    cartId: string;
    productId: string;
    variantId: string;
}
