import { AddressFormItem, BillingFormItem, AddressForm, IkasAddressFormFields } from "./model";
export interface LocalizedAddressConstructorData<T> {
    currentLocale?: string;
    currentCountry?: string;
    invisibleAddressFields?: AddressFormItem[];
    invisibleBillingFields?: BillingFormItem[];
    validateAddressForm?: boolean;
    validateBillingForm?: boolean;
    customAddressFormSettings?: IkasAddressFormFields;
    message: LocalizedAddressValidatorMessage<T>;
}
export type LocalizedAddressValidatorMessage<T> = {
    requiredRule: ((item: AddressFormItem, model: T) => string) | string;
    invalidRule: ((item: AddressFormItem, model: T) => string) | string;
    phoneRule: ((item: AddressFormItem, model: T) => string) | string;
};
export declare class LocalizedAddress {
    private _initialized;
    private _currentLocale;
    private _currentCountry;
    private _invisibleAddressFields;
    private _invisibleBillingFields;
    private _address;
    private _validateAddressForm?;
    private _validateBillingForm?;
    private _customAddressFormSettings?;
    private _isErrorsVisible;
    private _message;
    private _localizedAddressModel;
    constructor(data: LocalizedAddressConstructorData<AddressForm>);
    waitUntilInitialized(): Promise<unknown>;
    init(): Promise<void>;
    get initialized(): boolean;
    get address(): AddressForm;
    get isErrorsVisible(): boolean;
    get currentCountry(): string;
    get addressFormat(): AddressFormItem[][];
    get addressFormatIgnoreCountry(): AddressFormItem[][];
    get billingFormat(): BillingFormItem[][];
    get fieldSettings(): {
        firstName: import("./model").AddressFormField;
        lastName: import("./model").AddressFormField;
        identityNumber: import("./model").AddressFormField;
        addressLine1: import("./model").AddressFormField;
        addressLine2: import("./model").AddressFormField;
        postalCode: import("./model").AddressFormField;
        country: import("./model").AddressFormField;
        state: import("./model").AddressFormField;
        city: import("./model").AddressFormField;
        district: import("./model").AddressFormField;
        region: import("./model").AddressFormField;
        phone: import("./model").AddressFormField;
        company: import("./model").AddressFormField;
        taxOffice: import("./model").AddressFormField;
        taxNumber: import("./model").AddressFormField;
    } | undefined;
    get fieldLabels(): import("./model").IkasAddressFormLabels | undefined;
    get isFreeTextCity(): boolean | undefined;
    get isFreeTextDistrict(): boolean | undefined;
    changeCountry(country: string): void;
    changeAddress(address: AddressForm): void;
    changeValidateAddressForm(value: boolean): void;
    changeValidateBillingForm(value: boolean): void;
    changeInvisibleAddressFields(value: AddressFormItem[] | undefined): void;
    changeInvisibleBillingFields(value: BillingFormItem[] | undefined): void;
    changeCustomAddressFormSettings(value: IkasAddressFormFields | undefined): void;
    validate(): void;
    resetValidate(): void;
    getPostalAddressFormat({ countryCode, address, isBillingAddress, identityNumberFormat, }: GetPostalAddressFormatParams): string[] | undefined;
    get validationResult(): {
        firstName: {
            hasError: boolean;
            message: string;
        };
        lastName: {
            hasError: boolean;
            message: string;
        };
        identityNumber: {
            hasError: boolean;
            message: string;
        };
        addressLine1: {
            hasError: boolean;
            message: string;
        };
        addressLine2: {
            hasError: boolean;
            message: string;
        };
        postalCode: {
            hasError: boolean;
            message: string;
        };
        country: {
            hasError: boolean;
            message: string;
        };
        state: {
            hasError: boolean;
            message: string;
        };
        city: {
            hasError: boolean;
            message: string;
        };
        district: {
            hasError: boolean;
            message: string;
        };
        region: {
            hasError: boolean;
            message: string;
        };
        phone: {
            hasError: boolean;
            message: string;
        };
        company: {
            hasError: boolean;
            message: string;
        };
        taxOffice: {
            hasError: boolean;
            message: string;
        };
        taxNumber: {
            hasError: boolean;
            message: string;
        };
    } | undefined;
    get isValidAddress(): boolean;
}
type GetPostalAddressFormatParams = {
    countryCode?: string;
    address: AddressForm;
    isBillingAddress?: boolean;
    identityNumberFormat?: (x: string) => string;
};
export {};
