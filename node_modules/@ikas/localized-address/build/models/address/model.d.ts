export declare const COUNTRY_FORMS_LOCALES: string[];
export interface LocalizedAddressModelConstructorData {
    currentLocale: string;
}
export declare class LocalizedAddressModel {
    private _initialized;
    private _currentLocale;
    private _addressFormCountrySettings;
    private _addressFormCountryLabels;
    constructor(data: LocalizedAddressModelConstructorData);
    init(): Promise<void>;
    get initialized(): boolean;
    waitUntilInitialized(): Promise<unknown>;
    getFieldSettings(fieldSettingsParams: FieldSettingsParams): {
        firstName: AddressFormField;
        lastName: AddressFormField;
        identityNumber: AddressFormField;
        addressLine1: AddressFormField;
        addressLine2: AddressFormField;
        postalCode: AddressFormField;
        country: AddressFormField;
        state: AddressFormField;
        city: AddressFormField;
        district: AddressFormField;
        region: AddressFormField;
        phone: AddressFormField;
        company: AddressFormField;
        taxOffice: AddressFormField;
        taxNumber: AddressFormField;
    } | undefined;
    getFieldLabels(country: string): IkasAddressFormLabels | undefined;
    getAddressFormat(country: string, invisibleFields?: AddressFormItem[]): AddressFormItem[][];
    getBillingFormat(country: string, invisibleFields?: BillingFormItem[]): BillingFormItem[][];
    getAddressFormatIgnoreCountry(country: string, invisibleFields?: AddressFormItem[]): AddressFormItem[][];
    getValidationResult(validationResultParams: ValidationResultParams): {
        firstName: ErrorType;
        lastName: ErrorType;
        identityNumber: ErrorType;
        addressLine1: ErrorType;
        addressLine2: ErrorType;
        postalCode: ErrorType;
        country: ErrorType;
        state: ErrorType;
        city: ErrorType;
        district: ErrorType;
        region: ErrorType;
        phone: ErrorType;
        company: ErrorType;
        taxOffice: ErrorType;
        taxNumber: ErrorType;
    } | undefined;
    isValidAddress(validationResultParams: ValidationResultParams): boolean;
    isValidField(value: string, fieldSettings: AddressFormField): ErrorType;
    isFreeTextCity(country: string): boolean | undefined;
    isFreeTextDistrict(country: string): boolean | undefined;
    getCountrySettings(country: string): IkasAddressFormCountrySettings;
    getCountryLabels(country: string): IkasAddressFormCountryLabels;
    getAddressFormatView(addressFormat: string): AddressFormItem[][];
    getBillingFormatView(billingFormat: string): BillingFormItem[][];
    getAddressFormCountrySettings(): Promise<void>;
    getAddressFormCountryLabels(): Promise<void>;
    private getAddressFormSetting;
    private getBillingFormSetting;
    private getAddressFormLabel;
    private validateByRegexString;
}
type FieldSettingsParams = {
    country: string;
    invisibleAddressFields?: AddressFormItem[];
    invisibleBillingFields?: BillingFormItem[];
    validateAddressForm?: boolean;
    validateBillingForm?: boolean;
    customAddressFormSettings?: CustomAddressFormSettings;
};
type ValidationResultParams = {
    address: AddressForm;
} & FieldSettingsParams;
export type CustomAddressFormSettings = {
    firstName?: AddressFormFieldSettings;
    lastName?: AddressFormFieldSettings;
    identityNumber?: AddressFormFieldSettings;
    addressLine1?: AddressFormFieldSettings;
    addressLine2?: AddressFormFieldSettings;
    postalCode?: AddressFormFieldSettings;
    country?: AddressFormFieldSettings;
    state?: AddressFormFieldSettings;
    city?: AddressFormFieldSettings;
    district?: AddressFormFieldSettings;
    region?: AddressFormFieldSettings;
    phone?: AddressFormFieldSettings;
    company?: AddressFormFieldSettings;
    taxOffice?: AddressFormFieldSettings;
    taxNumber?: AddressFormFieldSettings;
};
export type AddressFormFieldSettings = {
    required?: boolean;
    type?: IkasAddressFormInputType;
    regex?: string;
};
export type ErrorType = {
    hasError: boolean;
    isInvalid: boolean;
    isEmpty: boolean;
};
export type AddressForm = {
    firstName?: string;
    lastName?: string;
    identityNumber?: string;
    addressLine1?: string;
    addressLine2?: string;
    postalCode?: string;
    country?: string;
    state?: string;
    city?: string;
    district?: string;
    region?: string;
    phone?: string;
    company?: string;
    taxOffice?: string;
    taxNumber?: string;
};
export type IkasAddressFormCountrySettings = {
    id: string;
    addressFormat: string;
    billingFormat: string;
    code: string;
    iso2: string;
    iso3: string;
    phoneCode: string;
    fields: IkasAddressFormFields;
};
export type IkasAddressFormFields = {
    firstName?: AddressFormField;
    lastName?: AddressFormField;
    identityNumber?: AddressFormField;
    addressLine1?: AddressFormField;
    addressLine2?: AddressFormField;
    postalCode?: AddressFormField;
    country?: AddressFormField;
    state?: AddressFormField;
    city?: AddressFormField;
    district?: AddressFormField;
    region?: AddressFormField;
    phone?: AddressFormField;
    company?: AddressFormField;
    taxOffice?: AddressFormField;
    taxNumber?: AddressFormField;
};
export type AddressFormField = {
    required: boolean;
    type?: IkasAddressFormInputType;
    regex?: string;
};
export declare enum IkasAddressFormInputType {
    TEXT = "text",
    DROPDOWN = "dropdown"
}
export type IkasAddressFormCountryLabels = {
    name: string;
    fields: IkasAddressFormLabels;
};
export type IkasAddressFormLabels = {
    firstName?: AddressFormLabel;
    lastName?: AddressFormLabel;
    identityNumber?: AddressFormLabel;
    addressLine1?: AddressFormLabel;
    addressLine2?: AddressFormLabel;
    postalCode?: AddressFormLabel;
    country?: AddressFormLabel;
    state?: AddressFormLabel;
    city?: AddressFormLabel;
    district?: AddressFormLabel;
    region?: AddressFormLabel;
    phone?: AddressFormLabel;
    company?: AddressFormLabel;
    taxOffice?: AddressFormLabel;
    taxNumber?: AddressFormLabel;
};
export type AddressFormLabel = {
    placeholder?: string;
    label?: string;
};
export declare enum AddressFormItem {
    FIRSTNAME = "firstName",
    LASTNAME = "lastName",
    IDENTITY_NUMBER = "identityNumber",
    ADDRESS_LINE_1 = "addressLine1",
    ADDRESS_LINE_2 = "addressLine2",
    POSTAL_CODE = "postalCode",
    COUNTRY = "country",
    STATE = "state",
    CITY = "city",
    DISTRICT = "district",
    REGION = "region",
    PHONE = "phone"
}
export declare enum BillingFormItem {
    COMPANY = "company",
    TAX_OFFICE = "taxOffice",
    TAX_NUMBER = "taxNumber"
}
export {};
