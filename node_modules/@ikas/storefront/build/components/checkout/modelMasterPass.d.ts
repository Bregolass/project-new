import { OtpModalType } from "./components/master-pass/modal-otp";
import { SuccessModalType } from "./components/master-pass/modal-success";
import { IkasBaseStore } from "../../store";
import { IkasCheckout, IkasPaymentGateway } from "../../models";
import { MasterPassOperationTypeEnum } from "@ikas/storefront-api";
export declare const MFS_ELEMENT_ID = "ikasMasterPass";
export declare const MFS_SCRIPT_URL = "https://cdn.myikas.com/sf/scripts/mfs-client-nojquery.min.js";
declare type MFS_CB_HOC_TYPE_SOURCE = "checkMasterPass" | "register" | "resendOtp" | "linkCardToClient" | "validateTransaction" | "listCards" | "deleteCard";
declare type MFS_CB_HOC_TYPE = (params: {
    source: MFS_CB_HOC_TYPE_SOURCE;
    store: IkasBaseStore;
    checkout: IkasCheckout;
    callback?: () => void;
}) => MFS_CB_TYPE;
declare type MFS_CB_TYPE = (status: any, response: {
    responseCode: /* register success */ "0000" | /* register success */ "" | /* banka tarafindan otp dogrulamasi yapilir */ "5001" | /* masterpass tarafindan otp dogrulamasi yapilir*/ "5008" | /* Bu kredi kartı bu kullanıcıya daha önceden kaydedilmiştir. */ "5196" | /* Tek kullanımlık şifre doğrulanamadı. */ "1409" | /* External hesap bulunamadı. */ "1999" | string;
    responseDescription?: string;
    transactionId: string;
    accountStatus: any;
    url3D: string;
    cards: number | Array<Card>;
}) => void;
declare type MFS = {
    checkMasterPass: (formData: FormData, cb: MFS_CB_TYPE) => void;
    setClientId: (a: string) => void;
    register: (formData: FormData, cb: MFS_CB_TYPE) => void;
    resendOtp: (token: string, lang: string, cb: MFS_CB_TYPE) => void;
    validateTransaction: (formData: FormData, cb: MFS_CB_TYPE) => void;
    getLastToken: () => string;
    linkCardToClient: (formData: FormData, cb: MFS_CB_TYPE) => void;
    listCards: (phoneNumber: string, token: string, cb: MFS_CB_TYPE) => void;
    deleteCard: (formData: FormData, cb: MFS_CB_TYPE) => void;
    setAddress: (a: string) => void;
};
export declare type Card = {
    BankIca: string;
    CardStatus: string;
    EftCode: string;
    IsMasterPassMember: string;
    LoyaltyCode: string;
    Name: string;
    ProductName: string;
    PromtCpin: string;
    UniqueId: string;
    Value1: string;
    Value2: string;
    paymentGatewayId: string;
};
export default class MasterPassModel {
    checkMasterPassData: {
        status: "" | "noMasterPassAccount" | "hasMasterPassAccountButDoesNotHaveAnyOperation" | "hasMasterPassAccountAndHasRelation";
    };
    saveCardToMasterPass: {
        isCheckboxChecked: boolean;
        isSendConfirmationButtonPending: boolean;
        cardName: string;
        phoneNumber: string;
    };
    otpResponse: {
        status: "error" | "";
        text: string;
    };
    isOtpFormSubmitAtLeastOnce: boolean;
    visibleModal?: "otpModalBank" | "otpModalMasterPass" | "otpModalSuccess" | "linkCardToClient" | "linkCardToClientModalSuccess" | "mfsResponseModal";
    mfsResponseModalText?: string;
    cards: Card[];
    selectedCard?: Card;
    constructor();
    get isSaveCardToMasterPassPhoneNumberInputVisible(): boolean;
    get isSaveCardToMasterPassPhoneNumberInputDisabled(): boolean;
    /**
     * Use when phone number input disabled
     */
    saveCardToMasterPassPhoneNumberDisabledInputValue: ({ store, checkout, withPlus, }: {
        withPlus: boolean;
        store: IkasBaseStore;
        checkout: IkasCheckout;
    }) => string;
    get isSendConfirmationButtonDisabled(): boolean;
    onSaveCardToMasterPassCheckedChange: (value: boolean) => void;
    onSaveCardToMasterPassCardNameChange: (value: string) => void;
    onSaveCardToMasterPassPhoneNumberChange: (value: string) => void;
    onSaveCardToMasterPassSendConfirmationButtonClick: ({ creditCard, store, checkout, paymentGateway, callback, }: RegisterParams) => void;
    get isLinkCardToClientVisible(): boolean;
    get isOtpModalVisible(): boolean;
    get isResponseModalVisible(): boolean;
    get isSuccessModalVisible(): boolean;
    get otpModalType(): OtpModalType;
    get successModalType(): SuccessModalType;
    showLinkCardToClient: () => void;
    hideLinkCardToClient: () => void;
    showOtpModal: (modalType: OtpModalType) => void;
    hideOtpModal: () => void;
    onResponseModalClose: () => void;
    onSuccessModalClose: () => void;
    onLinkCardToClientButtonClick: (params: LinkCardToClientParams) => void;
    onOtpFormSubmit: (params: ValidateTransactionParams) => void;
    MFS: () => MFS | undefined;
    getToken: ({ cartId, paymentGatewayId, operationType, phoneNumber, }: {
        cartId: string;
        paymentGatewayId: string;
        operationType: MasterPassOperationTypeEnum;
        phoneNumber: string;
    }) => Promise<import("@ikas/storefront-api/build/__api/types").MasterPassTokenResponse | undefined>;
    phoneNumber: ({ store, checkout, withPlus, }: {
        store: IkasBaseStore;
        checkout: IkasCheckout;
        withPlus?: boolean | undefined;
    }) => string | null | undefined;
    sendSmsLanguage: (store: IkasBaseStore) => string;
    /**
     * Send object return value is FormData
     * @returns FormData
     */
    prepareFormData<T>(data: T): FormData;
    clearSaveCardToMasterPassForm: () => void;
    /**
     * MFS (MasterPass js library) response handler.
     */
    mfsResponseHandler: MFS_CB_HOC_TYPE;
    showTokenErrorWithModal: () => void;
    /**
     * CheckMasterPass for customer. Call it on initial. For more detail keep reading. [tr]
  
     * Soldan ilk 6 hane 000000 ise
     * Kullanıcının masterpass hesabı yok anlamına gelmektedir. Burada isterseniz kart kaydına
     * yönlendirebilirsiniz. Kart kaydını sizin üzerinizden gerçekleştirdiğinde otomatik linklenecektir
     * ve tekrar checkmasterpass servisine istek yaptığınızda ilk 6 hanenin değiştiğini göreceksiniz.
  
     * Soldan ilk 6 hane 011000 ise
     * Kullanıcının daha önce başka üye işyerinde kayıtlı hesabı olduğu anlamına gelmektedir.
     * Bu aşamada kullanıcıyı linkleme (linkCardtoClient) akışına sokmanız gerekmektedir.
     * “Masterpass’e kayıtlı kartların var, kullanmak ister misin?” sorusu sorulur
     * ve evet cevabında linkCardtoClient servisi çağrılır. Sms doğrulaması yapıldıktan
     * sonra linkleme başarıyla gerçekleşeceği için ListCard servisi ile kartlar listelenir.
  
     * Soldan ilk 6 hane 011100 ise
     * Kullanıcı daha önce ikas üzerinde linkli ve kartları kaydedilmiş demektir.
     * Bu durumda kullanıcıdan herhangi bir aksiyon almasını beklemeden doğrudan
     * kayıtlı kartlarının listelenmesi (ListCard servisi ile) gerekiyor.
     */
    checkMasterPass: ({ checkout, store, ...rest }: CheckMasterPassParams) => Promise<void>;
    /**
     * Save card to MasterPass
     */
    register: ({ creditCard, store, checkout, paymentGateway, callback, }: RegisterParams) => Promise<void>;
    resendOtp: ({ store, checkout, callback, }: {
        store: IkasBaseStore;
        checkout: IkasCheckout;
        callback: () => void;
    }) => Promise<void>;
    /**
     * First checkMasterPass then check respone;
     * [tr] Soldan ilk 6 hane 011000 ise
     * Kullanıcının daha önce başka üye işyerinde kayıtlı hesabı olduğu anlamına gelmektedir.
     * Bu aşamada kullanıcıyı linkleme (linkCardtoClient) akışına sokmanız gerekmektedir.
     * “Masterpass’e kayıtlı kartların var, kullanmak ister misin?” sorusu sorulur
     * ve evet cevabında linkCardtoClient servisi çağrılır. Sms doğrulaması yapıldıktan
     * sonra linkleme başarıyla gerçekleşeceği için ListCard servisi ile kartlar listelenir.
     */
    linkCardToClient: ({ store, checkout, callback, }: LinkCardToClientParams) => Promise<void>;
    validateTransaction: ({ validationCode, store, checkout, callback, }: ValidateTransactionParams) => Promise<void>;
    listCards: ({ store, checkout }: ListCardsParams) => Promise<void>;
    deleteCard: ({ store, checkout, card }: DeleteCardParams) => Promise<void>;
}
declare type RegisterParams = {
    creditCard: {
        rtaPan: string;
        expiryDate: string;
        cvc: string;
        accountAliasName: string;
        phoneNumber: string;
    };
    paymentGateway: IkasPaymentGateway;
    store: IkasBaseStore;
    checkout: IkasCheckout;
    callback: () => void;
};
declare type CheckMasterPassParams = {
    checkout: IkasCheckout;
    store: IkasBaseStore;
};
declare type LinkCardToClientParams = {
    cartId: string;
    checkout: IkasCheckout;
    store: IkasBaseStore;
    callback?: () => void;
};
declare type ValidateTransactionParams = {
    validationCode: string;
    store: IkasBaseStore;
    checkout: IkasCheckout;
    callback: () => void;
};
declare type ListCardsParams = {
    store: IkasBaseStore;
    checkout: IkasCheckout;
};
declare type DeleteCardParams = {
    store: IkasBaseStore;
    checkout: IkasCheckout;
    card: Card;
};
export {};
