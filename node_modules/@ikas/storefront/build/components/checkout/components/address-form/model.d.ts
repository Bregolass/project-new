import { IkasCountry, IkasState, IkasCity, IkasDistrict, IkasOrderAddressCountry, IkasOrderAddressCity, IkasOrderAddressDistrict, IkasLocalizedCustomerAddress } from "../../../../models";
import IkasLocalizedOrderAddress from "../../../../models/data/order/address/ikas-localized-order-address";
declare type Callback = ((value: string) => void) | null | undefined;
export interface AddressFormViewModelParams {
    address: IkasLocalizedOrderAddress | IkasLocalizedCustomerAddress;
    isCorporate?: boolean;
    isErrorsVisible: boolean;
    isCustomerAddress?: boolean;
    allowedCountryIds?: string[] | null;
    allowCorporateInfo?: boolean;
    allowTitleChange?: boolean;
    firstNameChangeCallback?: Callback;
    lastNameChangeCallback?: Callback;
    deliveryMethod?: "address" | "in-store";
}
export default class AddressFormViewModel {
    address: IkasLocalizedOrderAddress | IkasLocalizedCustomerAddress;
    isCorporate: boolean;
    isErrorsVisible: boolean;
    isCustomerAddress?: boolean;
    allowedCountryIds?: string[] | null;
    allowCorporateInfo?: boolean;
    allowTitleChange?: boolean;
    firstNameChangeCallback?: Callback;
    lastNameChangeCallback?: Callback;
    countries: IkasCountry[];
    states: IkasState[];
    cities: IkasCity[];
    districts: IkasDistrict[];
    myCountryCode?: string | null;
    constructor(data: AddressFormViewModelParams);
    get firstName(): string;
    get lastName(): string;
    get phone(): string | null;
    get identityNumber(): string | null;
    get country(): IkasOrderAddressCountry | import("../../../../models").IkasCustomerAddressCountry | null;
    get state(): import("../../../../models").IkasOrderAddressState | import("../../../../models").IkasCustomerAddressState | null;
    get city(): IkasOrderAddressCity | import("../../../../models").IkasCustomerAddressCity | null;
    get district(): IkasOrderAddressDistrict | import("../../../../models").IkasCustomerAddressDistrict | null;
    get countryOptions(): {
        label: string;
        value: string;
    }[];
    get stateOptions(): {
        label: string;
        value: string;
    }[];
    get cityOptions(): {
        label: string;
        value: string;
    }[];
    get districtOptions(): {
        label: string;
        value: string;
    }[];
    get hasState(): boolean;
    get isFreeTextCity(): boolean;
    get isDistrictHidden(): boolean;
    fillDropdownOptions: () => Promise<void>;
    listCountries: () => Promise<void>;
    listStates: () => Promise<void>;
    listCities: () => Promise<void>;
    listDistricts: () => Promise<void>;
    modelToOption: (model: IkasCountry | IkasState | IkasCity | IkasDistrict) => {
        label: string;
        value: string;
    };
    onFirstNameChange: (value: string) => void;
    onLastNameChange: (value: string) => void;
    onPhoneChange: (value: string) => void;
    onIdentityNumberChange: (value: string) => void;
    onAddressTitleChange: (value: string) => void;
    onAddressLine1Change: (value: string) => void;
    onAddressLine2Change: (value: string) => void;
    onAddressPostalCodeChange: (value: string) => void;
    onCountryChange: (countryId: string) => void;
    onStateChange: (stateId: string) => void;
    onCityChange: (cityId: string) => void;
    onCityInputChange: (value: string) => void;
    onDistrictChange: (districtId: string) => void;
    onDistrictInputChange: (value: string) => void;
    onCorporateChange: (value: boolean) => void;
    onCompanyChange: (value: string) => void;
    onTaxNumberChange: (value: string) => void;
    onTaxOfficeChange: (value: string) => void;
}
export {};
