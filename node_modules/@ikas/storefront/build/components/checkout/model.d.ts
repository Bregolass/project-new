import { NextRouter } from "next/router.js";
import { IkasMerchantSettings, IkasAvailableShippingMethod, IkasOrderLineItem, IkasOrderTransaction, IkasProduct, IkasProductVariant, IkasCartCampaignOffer, IkasCheckout, IkasStockLocation, IkasAvailableStockLocation, IkasCampaignOfferTargetPageType, IkasCampaignOfferProduct, IkasLocalizedCustomerAddress } from "../../models";
import { IkasPaymentGateway } from "../../models/data/payment-gateway";
import { IkasOrderLineVariant } from "../../models/data/order/line-item/variant";
import { IkasStorefront } from "../../models/data/storefront";
import CreditCardData from "./components/credit-card-form/model";
import { IkasCheckoutSettings } from "../../models/data/checkout-settings";
import { TFunction } from "../../utils/i18n";
import { IkasCheckoutCustomizationProps } from ".";
import MasterPassModel from "./modelMasterPass";
import { APIResponse } from "@ikas/fe-api-client";
import { CreateStripePaymentIntentResponse, RetrieveInstallmentInfoResponse, UpdateCartCampaignOfferInput, CreateKlarnaTokenResponse, CreateAdyenSessionResponse, GetPaypalClientIdResponse, CreatePaypalOrderResponse } from "@ikas/storefront-api";
import { IkasBaseStore } from "../../store";
import { RetrieveInstallmentInfoQueryParams, SaveCartInput } from "@ikas/storefront-api";
import { LocalizedAddressModel } from "@ikas/localized-address";
export declare type IUnavailableItems = {
    item: IkasOrderLineItem;
    stockCount: number;
};
export default class CheckoutViewModel {
    checkout: IkasCheckout;
    checkoutSettings: IkasCheckoutSettings;
    storefront?: IkasStorefront | null;
    router: NextRouter;
    isCheckoutLoaded: boolean;
    isErrorsVisible: boolean;
    isStepLoading: boolean;
    isTermsAndConditionsChecked: boolean;
    isChangingShippingMethod: boolean;
    isContactModalVisible: boolean;
    isEPayKolayPayment: boolean;
    step: CheckoutStep;
    customizationProps?: IkasCheckoutCustomizationProps | null;
    cardData?: CreditCardData | null;
    paymentGateways: IkasPaymentGateway[];
    installmentInfo?: RetrieveInstallmentInfoResponse | null;
    useDifferentAddress: boolean;
    shouldSaveAddress: boolean;
    addressTitle: string;
    shippingCountryIds?: string[] | null;
    selectedShippingAddressId?: string;
    selectedBillingAddressId?: string;
    stockLocations: IkasStockLocation[];
    availableStockLocations: IkasAvailableStockLocation[];
    deliveryMethod: "address" | "in-store";
    stripeResponse: CreateStripePaymentIntentResponse | null;
    klarnaResponse: CreateKlarnaTokenResponse | null;
    isKlarnaPaymentCompleted: boolean;
    adyenResponse: CreateAdyenSessionResponse | null;
    adyenDropinElement: any;
    payPalClientIdResponse: GetPaypalClientIdResponse | null;
    paypalOrderResponse: CreatePaypalOrderResponse | null;
    checkoutCampaignOffer: CampaignOfferType | undefined;
    postCheckoutCampaignOffer: CampaignOfferType | undefined;
    countrySettings: LocalizedAddressModel;
    returnPolicy: string;
    privacyPolicy: string;
    termsOfService: string;
    imprint: string;
    shippingPolicy: string;
    policyModalTitle: string;
    policyModalText: string;
    error?: CheckoutError | null;
    couponError?: string | null;
    successTransaction?: IkasOrderTransaction;
    mpVM: MasterPassModel;
    showTestModal: boolean;
    t: TFunction;
    constructor(checkout: IkasCheckout, checkoutSettings: IkasCheckoutSettings, router: NextRouter, returnPolicy: string, privacyPolicy: string, termsOfService: string, imprint: string, shippingPolicy: string, t: TFunction, customizationProps: IkasCheckoutCustomizationProps);
    init: () => Promise<void>;
    initStep: () => Promise<void>;
    getSuccessTransaction: () => Promise<void>;
    get merchantSettings(): IkasMerchantSettings;
    get selectedPaymentGatewayIndex(): number;
    get selectedInstallmentIndex(): number;
    get checkoutUrl(): string;
    get customerAddressOptions(): {
        label: string;
        value: string;
    }[];
    get installmentPrice(): number | null | undefined;
    get installmentExtraPrice(): number | undefined;
    get finalPrice(): number;
    get hasStockError(): boolean;
    get isPaymentGatewayHasMasterPass(): boolean;
    get hasQuickRegistration(): boolean | null;
    get canProceedToShipping(): boolean | undefined;
    get canProceedToInStoreDelivery(): boolean;
    get canProceedToPayment(): boolean | undefined;
    get isInStoreDelivery(): boolean;
    get klarnaPaymentGateway(): IkasPaymentGateway | undefined;
    get klarnaPaymentGatewayIndex(): number;
    get adyenPaymentGateway(): IkasPaymentGateway | undefined;
    get adyenPaymentGatewayIndex(): number;
    get payPalPaymentGateway(): IkasPaymentGateway | undefined;
    get payPalPaymentGatewayIndex(): number;
    get isCustomFlowStripe(): false | import("../../models").IkasPaymentGatewaySettings | null | undefined;
    get isKlarna(): boolean | null | undefined;
    get isAdyen(): boolean | null | undefined;
    get isPayPal(): boolean | null | undefined;
    get store(): IkasBaseStore;
    get canPerformPayment(): boolean | undefined;
    get isDigitalOnly(): boolean;
    get customerAddresses(): IkasLocalizedCustomerAddress[] | undefined;
    get isManualOrder(): boolean;
    get isEPayKolayEnabled(): boolean;
    saveCart: () => Promise<import("../../models").IkasCart | null | undefined>;
    inStockDeliveryInputData: (input: SaveCartInput) => Promise<SaveCartInput>;
    checkStocks: () => Promise<void>;
    setIsKlarnaPaymentCompleted: (status: boolean) => Promise<void>;
    removeUnavailableItems: (items: IUnavailableItems[]) => Promise<void>;
    getShippingCountries: () => Promise<void>;
    getStockLocations: () => Promise<void>;
    getAvailableStockLocations: () => Promise<void>;
    checkShippingCountries: () => void;
    onDeliveryMethodChange: (deliveryMethod: "address" | "in-store") => void;
    initialStockCheck: () => Promise<void>;
    listPaymentGateways: () => Promise<void>;
    retrieveInstallmentInfo: (params: RetrieveInstallmentInfoQueryParams) => Promise<void>;
    createCustomer: () => void;
    setCheckoutShippingAddressSettings: () => void;
    setCheckoutBillingAddressSettings: () => void;
    createShippingAddress: () => void;
    createBillingAddress: () => void;
    onShippingMethodChange: (shippingMethod: IkasAvailableShippingMethod) => Promise<void>;
    onStockLocationChange: (location: IkasStockLocation) => Promise<void>;
    onCouponCodeApply: () => Promise<void>;
    onSelectedShippingAddressIdChange: (value: string) => void;
    onSelectedBillingAddressIdChange: (value: string) => void;
    onTermsAndConditionsCheckedChange: (value: boolean) => void;
    onCardNumberChange: (value: string) => void;
    onCardHolderNameChange: (value: string) => void;
    onExpirationDateChange: (value: string) => void;
    onCvcChange: (value: string) => void;
    saveAddress: (type: "billing" | "shipping") => Promise<void>;
    onGoToCartClick: () => void;
    onBackToShoppingClick: () => void;
    onGoToLoginClick: () => void;
    onProceedToShippingClick: () => Promise<void>;
    onProceedToDigitalOnlyPaymentClick: () => Promise<void>;
    onProceedToPaymentClick: () => Promise<void>;
    checkPaypalButtonAvailable: () => boolean;
    onCompletePaymentClick: () => Promise<void>;
    onCompleteDigitalOnlyPaymentClick: () => Promise<void>;
    createSaleTransaction: () => Promise<void>;
    onCheckoutTransactionSuccess: () => Promise<void>;
    onBackToInfoClick: () => void;
    onBackToShippingClick: () => void;
    setCustomerConsentGranted: (value: boolean) => void;
    setUseDifferentAddress: (value: boolean) => void;
    setShouldSaveAddress: (value: boolean) => void;
    setAddressTitle: (value: string) => void;
    setPaymentGateway: (index: number) => Promise<void>;
    setInstallmentCount: (count: number) => void;
    changeStep: (step: CheckoutStep) => Promise<void>;
    logout: () => Promise<void>;
    setContactModalVisible: (value: boolean) => void;
    getCampaignOfferProducts: (targetPage: IkasCampaignOfferTargetPageType) => Promise<{
        product: IkasProduct;
        variants: IkasProductVariant[];
        campaignOffer: IkasCartCampaignOffer;
        offer: IkasCampaignOfferProduct;
    } | undefined>;
    getCampaignOffer: () => Promise<void>;
    updateCartCampaignOffer: (props: UpdateCartCampaignOfferInput) => Promise<void>;
    registerCustomer: (password: string) => Promise<APIResponse<{
        customer: import("../../models").IkasCustomer | null;
        token: string;
        tokenExpiry: number;
    } | null> | undefined>;
    setAdyenDropinElement(element: any): void;
}
export declare enum CheckoutStep {
    INFO = "info",
    SHIPPING = "shipping",
    PAYMENT = "payment",
    SUCCESS = "success"
}
export declare enum ErrorType {
    UNKNOWN = 0,
    API_ERROR = 1,
    STOCK_ERROR = 2,
    PAYMENT_ERROR = 3,
    NO_SHIPPING_ERROR = 4,
    CUSTOMER_LOGIN_REQUIRED_ERROR = 5
}
export declare type CheckoutError = {
    type: ErrorType;
    data?: any;
};
export declare type StockErrorData = {
    variant: IkasOrderLineVariant;
    availableQuantity: number;
};
export declare type CampaignOfferType = {
    product: IkasProduct;
    variants: IkasProductVariant[];
    campaignOffer: IkasCartCampaignOffer;
    offer: IkasCampaignOfferProduct;
};
