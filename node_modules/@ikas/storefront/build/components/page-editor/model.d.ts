import { IkasThemeJson, IkasThemeJsonComponent, IkasThemeJsonPage, IkasThemeJsonPageComponent, IkasThemeJsonPageSpecification, IkasThemeJsonPageType } from "../../models";
import { IkasPageComponentPropValue, IkasPageDataProvider } from "@ikas/storefront-providers";
import { NextRouter } from "next/router.js";
export default class IkasPageEditorViewModel {
    theme?: IkasThemeJson | null;
    page?: IkasThemeJsonPage | null;
    selectedPageComponentId?: string | null;
    hoveredPageComponentId?: string | null;
    componentRefs: any;
    isLoading: boolean;
    updateId: string;
    locale: string;
    translations?: Record<string, any>;
    pageParams: Record<string, any>;
    apiKey?: string | null;
    pageDataProvider?: IkasPageDataProvider | null;
    initializedPropValues: IkasPageComponentPropValue[];
    router: NextRouter;
    constructor(router: NextRouter);
    get specification(): IkasThemeJsonPageSpecification | undefined;
    get pageComponents(): IkasThemeJsonPageComponent[];
    get selectedPageComponent(): IkasThemeJsonPageComponent | undefined;
    get selectedComponent(): IkasThemeJsonComponent | undefined;
    createLoadingListener(): void;
    startMessaging: () => void;
    onMessage: (event: MessageEvent) => Promise<void>;
    onClick: (id: string) => void;
    onMouseOver: (id: string) => void;
    onMouseLeave: (id: string) => void;
    onPageChange: (url: string) => Promise<void>;
    onLoadingChange: () => void;
    getVariantIdFromParams(productId: string, queryParamsStr: string): Promise<string | undefined>;
    sendMessage: (type: BridgeMessageType, data?: any) => void;
    getPagePropValues: (theme: IkasThemeJson, pageType: IkasThemeJsonPageType, pageParams: Record<string, any>) => Promise<IkasPageDataProvider>;
    setComponentRef: (element: React.ElementType, component: IkasThemeJsonPageComponent) => void;
    isScrolledIntoView: (el: HTMLElement) => boolean;
    handleUpdateFrameData: (data: any) => Promise<void>;
    setCustomerSettings: () => Promise<void>;
    handleUpdateThemeJson: (data: any) => Promise<void>;
    handleUpdatePropValue: (data: any) => Promise<void>;
    handleUpdatePageParams: (data: any) => Promise<void>;
    handleUpdatePageComponentOrder: (data: any) => Promise<void>;
    handleAddNewComponent: (data: any) => void;
    handleDeleteComponent: (data: any) => void;
    handleUpdateComponent: (data: any) => void;
    handleAddNewPageComponent: (data: any) => Promise<void>;
    handleDeletePageComponent: (data: any) => void;
    handleSetSelectedComponent: (data: any) => void;
    handleSetHoveredComponent: (data: any) => void;
    handleScrollToComponent: (data: any) => void;
    handleEditorReload: () => void;
    updateThemeSettings: (data: any) => void;
}
export declare enum BridgeMessageType {
    FRAME_DID_LOAD = "FRAME_DID_LOAD",
    UPDATE_FRAME_DATA = "UPDATE_FRAME_DATA",
    UPDATE_THEME_JSON = "UPDATE_THEME_JSON",
    UPDATE_PROP_VALUE = "UPDATE_PROP_VALUE",
    UPDATE_PAGE_PARAMS = "UPDATE_PAGE_PARAMS",
    UPDATE_PAGE_COMPONENT_ORDER = "UPDATE_PAGE_COMPONENT_ORDER",
    ADD_COMPONENT = "ADD_COMPONENT",
    DELETE_COMPONENT = "DELETE_COMPONENT",
    UPDATE_COMPONENT = "UPDATE_COMPONENT",
    ADD_PAGE_COMPONENT = "ADD_PAGE_COMPONENT",
    DELETE_PAGE_COMPONENT = "DELETE_PAGE_COMPONENT",
    COMPONENT_MOUSE_OVER = "COMPONENT_MOUSE_OVER",
    COMPONENT_MOUSE_LEAVE = "COMPONENT_MOUSE_LEAVE",
    COMPONENT_CLICK = "COMPONENT_CLICK",
    SET_SELECTED_COMPONENT = "SET_SELECTED_COMPONENT",
    SET_HOVERED_COMPONENT = "SET_HOVERED_COMPONENT",
    SCROLL_TO_COMPONENT = "SCROLL_TO_COMPONENT",
    UPDATE_THEME_SETTINGS = "UPDATE_THEME_SETTINGS",
    EDITOR_PAGE_CHANGE = "EDITOR_PAGE_CHANGE",
    EDITOR_LOADING_CHANGE = "EDITOR_LOADING_CHANGE",
    EDITOR_RELOAD = "EDITOR_RELOAD"
}
