import { APIResponse, GetOrderLineFileQueryParams, GetProductCampaignsQueryParams, GetProductFilterDataQueryParams, GetRelatedProductsQueryParams, GetSuggestedProductsQueryParams, ListProductAttributeQueryParams, ListProductBackInStockRemindQueryParams, ListProductOptionSetQueryParams, SaveProductBackInStockRemindQueryParams, SearchProductsQueryParams, GetVariantStockLocationsQueryParams } from "@ikas/storefront-api";
import { IkasProduct } from "../../models/data/product";
import { IkasProductAttribute } from "../../models/data/product/attribute";
import { IkasProductCampaign } from "../../models/data/product/campaign";
import { IkasProductFilter } from "../../models/data/product/filter";
import { IkasProductOptionSet } from "../../models/data/product/option-set";
import { IkasFilterCategory } from "../../models/data/filter-category";
import { IkasProductStockLocations } from "../../models/data/product/stock-location";
export default class ProductStore {
    static listProductBackInStockRemind(params: ListProductBackInStockRemindQueryParams): Promise<APIResponse<import("@ikas/storefront-api/build/__api/types").ProductBackInStockRemind[]> | APIResponse<undefined>>;
    static saveProductBackInStockRemind(params: SaveProductBackInStockRemindQueryParams): Promise<APIResponse<undefined> | APIResponse<import("@ikas/storefront-api/build/__api/types").ProductBackInStockRemind>>;
    static searchProducts(params: SearchProductsQueryParams): Promise<APIResponse<{
        data: IkasProduct[] | undefined;
        count?: number | undefined;
        facets?: import("@ikas/storefront-api/build/__api/types").ProductFacetCount[] | null | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        results?: import("@ikas/storefront-api/build/__api/types").SearchProduct[] | undefined;
        totalCount?: number | undefined;
        locale: string;
    }>>;
    static getProductFilterData(params: GetProductFilterDataQueryParams): Promise<APIResponse<{
        filters: IkasProductFilter[];
        categories: IkasFilterCategory[] | undefined;
    } | null>>;
    static getRelatedProducts(params: GetRelatedProductsQueryParams): Promise<APIResponse<{
        data: IkasProduct[] | undefined;
        count?: any;
        facets?: null | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        totalCount?: any;
    }>>;
    static getSuggestedProducts(params: GetSuggestedProductsQueryParams): Promise<APIResponse<{
        data: IkasProduct[] | undefined;
        count?: number | undefined;
        facets?: null | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        totalCount?: number | undefined;
    }>>;
    static listProductAttribute(params: ListProductAttributeQueryParams): Promise<APIResponse<IkasProductAttribute[]>>;
    static getProductCampaigns(params: GetProductCampaignsQueryParams): Promise<APIResponse<IkasProductCampaign[]>>;
    static getVariantStockLocations(params: GetVariantStockLocationsQueryParams): Promise<APIResponse<IkasProductStockLocations[]>>;
    static getOrderLineFile(params: GetOrderLineFileQueryParams): Promise<APIResponse<undefined> | APIResponse<string>>;
    static listProductOptionSet(params: ListProductOptionSetQueryParams): Promise<APIResponse<IkasProductOptionSet[]>>;
}
