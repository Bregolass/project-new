import { IkasContactForm, IkasCustomer, IkasCustomerAttributeValue, IkasFavoriteProduct, IkasOrderTransaction, IkasProduct, IkasOrder, IkasRaffleParticipant } from "../../models/data";
import { IkasRegisterError } from "@ikas/storefront-api";
import { IkasBaseStore } from "../base";
export declare class IkasCustomerStore {
    customer?: IkasCustomer | null;
    private token?;
    private tokenExpiry?;
    private baseStore?;
    private _initialized;
    private _visitorSubscribedEmail;
    private _lastViewedProducts;
    private _customerConsentGranted;
    private _refundSettings?;
    private _captchaToken;
    private _savedLastViewedProducts;
    private _savedLastViewedProductsResponse;
    constructor(baseStore?: IkasBaseStore);
    get initialized(): boolean;
    get canCreateEmailSubscription(): boolean;
    get customerConsentGranted(): boolean;
    get isCaptchaRequired(): boolean;
    private get useLastViewedProductResponse();
    private toAnalyticsCustomer;
    socialLogin(provider: "facebook" | "google"): Promise<void>;
    socialLoginToken(token: string): Promise<boolean>;
    refundOrder(order: IkasOrder): Promise<boolean>;
    login: (email: string, password: string) => Promise<boolean>;
    logout: () => void;
    register: (firstName: string, lastName: string, email: string, password: string, isMarketingAccepted?: boolean, attributes?: IkasCustomerAttributeValue[], phone?: string | null) => Promise<{
        isSuccess: boolean;
        errorCodes: IkasRegisterError[];
    }>;
    activateCustomer: () => Promise<boolean>;
    resendCustomerActivationMail: (email: string) => Promise<boolean>;
    saveContactForm: (input: IkasContactForm) => Promise<boolean>;
    checkEmail: (email: string) => Promise<boolean>;
    forgotPassword: (email: string) => Promise<boolean>;
    recoverPassword: (password: string, passwordAgain: string, token: string) => Promise<boolean>;
    saveCustomer: (customer: IkasCustomer) => Promise<boolean>;
    getOrders: () => Promise<IkasOrder[]>;
    getOrder: (id: string) => Promise<IkasOrder | null>;
    getOrderByEmail: (email: string, orderNumber: string) => Promise<IkasOrder | null>;
    getOrderTransactions: (params?: {
        checkoutId?: string;
        id?: string;
        orderId?: string;
    }) => Promise<IkasOrderTransaction[]>;
    getFavoriteProductsIds: () => Promise<IkasFavoriteProduct[]>;
    getFavoriteProducts: () => Promise<IkasProduct[]>;
    addProductToFavorites: (productId: string) => Promise<boolean>;
    removeProductFromFavorites: (productId: string) => Promise<boolean>;
    isProductFavorite: (productId: string) => Promise<boolean>;
    createEmailSubscription: (email: string) => Promise<boolean>;
    sendReview: (input: IkasCustomerReviewForm) => Promise<import("../../models/data").IkasCustomerReview | null | undefined>;
    onCustomerConsentGrant: () => void;
    waitUntilInitialized: () => Promise<unknown>;
    waitUntilCaptchaTokenInitialized: () => Promise<unknown>;
    getRaffles: () => Promise<IkasRaffleParticipant[] | undefined>;
    getCustomerAttributes: () => Promise<import("../../models/data").IkasCustomerAttribute[]>;
    private init;
    private getOrderRefundSettings;
    private routeChangeInit;
    private getCustomer;
    private refreshToken;
    private setCustomer;
    private setSavedLastViewedProductsResponse;
    private getLastViewedProducts;
    private saveLastViewedProducts;
    private loadLastViewedProducts;
    private getLocalLastViewedProducts;
    private removeLastViewedProducts;
    private onProductView;
    private saveLocalLastViewedProducts;
    private saveCustomerConsent;
    private loadCustomerConsent;
    private removeCustomerConsent;
    private setToken;
    private loadToken;
    private clearLocalTokenData;
    private clearLocalData;
    private clearCaptchaToken;
    private setCaptchaToken;
    private getCaptcha;
}
export declare type IkasCustomerReviewForm = {
    comment?: string;
    productId: string;
    star: number;
    title?: string;
};
export type { IkasRegisterError as RegisterResponseErrorCode };
