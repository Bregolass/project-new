import { APIResponse } from "@ikas/fe-api-client";
import { CheckCustomerEmailQueryParams, SubscribeToMarketingNotificationsQueryParams, CreateCustomerReviewQueryParams, CreateOrderRefundRequestQueryParams, CustomerForgotPasswordQueryParams, CustomerLoginQueryParams, CustomerRecoverPasswordQueryParams, CustomerRefreshTokenQueryParams, CustomerSocialLoginQueryParams, GetCustomerOrdersQueryParams, GetLastViewedProductsQueryParams, GetOrderByEmailQueryParams, IsFavoriteProductQueryParams, ListCustomerReviewsQueryParams, ListCustomerReviewSummaryQueryParams, ListOrderRefundSettingsQueryParams, ListOrderTransactionsQueryParams, RegisterCustomerQueryParams, SaveFavoriteProductQueryParams, SaveLastViewedProductsQueryParams, SaveMyCustomerQueryParams, SendContactFormToMerchantQueryParams, ActivateCustomerQueryParams, ResendCustomerActivationMailQueryParams } from "@ikas/storefront-api";
import { IkasCustomer, IkasCustomerAttribute, IkasCustomerReview, IkasCustomerReviewSummary, IkasFavoriteProduct, IkasLastViewedProduct, IkasOrder, IkasOrderRefundSettings, IkasOrderTransaction } from "../../models/data";
export default class CustomerStoreAPI {
    static login(params: CustomerLoginQueryParams): Promise<APIResponse<{
        customer: IkasCustomer | null;
        token: string;
        tokenExpiry: number;
    } | null>>;
    static socialLogin(params: CustomerSocialLoginQueryParams): Promise<APIResponse<{
        customer: IkasCustomer | null;
        token: string;
        tokenExpiry: number;
    } | null>>;
    static register(params: RegisterCustomerQueryParams): Promise<APIResponse<{
        customer: IkasCustomer | null;
        token: string;
        tokenExpiry: number;
    } | null>>;
    static refreshToken(params: CustomerRefreshTokenQueryParams): Promise<APIResponse<undefined> | APIResponse<import("@ikas/storefront-api/build/__api/types").CustomerRefreshTokenResponse>>;
    static forgotPassword(params: CustomerForgotPasswordQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
    static recoverPassword(params: CustomerRecoverPasswordQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
    static checkEmail(params: CheckCustomerEmailQueryParams): Promise<APIResponse<undefined> | APIResponse<import("@ikas/storefront-api/build/__api/types").CustomerCheckResponse>>;
    static getCustomer(): Promise<APIResponse<IkasCustomer | null>>;
    static saveCustomer(params: SaveMyCustomerQueryParams): Promise<APIResponse<IkasCustomer | null>>;
    static getOrders(params: GetCustomerOrdersQueryParams): Promise<APIResponse<IkasOrder[]>>;
    static getOrderByEmail(params: GetOrderByEmailQueryParams): Promise<APIResponse<IkasOrder | null>>;
    static listOrderTransactions(params: ListOrderTransactionsQueryParams): Promise<APIResponse<IkasOrderTransaction[]>>;
    static createOrderRefundRequest(params: CreateOrderRefundRequestQueryParams): Promise<APIResponse<IkasOrder | null>>;
    static subscribeToMarketingNotifications(params: SubscribeToMarketingNotificationsQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
    static getLastViewedProducts(params: GetLastViewedProductsQueryParams): Promise<APIResponse<IkasLastViewedProduct[]>>;
    static saveLastViewedProducts(params: SaveLastViewedProductsQueryParams): Promise<APIResponse<undefined> | APIResponse<import("@ikas/storefront-api/build/__api/types").ProductLastViewed>>;
    static listOrderRefundSettings(params: ListOrderRefundSettingsQueryParams): Promise<APIResponse<IkasOrderRefundSettings[]>>;
    static sendContactFormToMerchant(params: SendContactFormToMerchantQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
    static listFavoriteProducts(): Promise<APIResponse<IkasFavoriteProduct[]>>;
    static saveFavoriteProduct(params: SaveFavoriteProductQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
    static isFavoriteProduct(params: IsFavoriteProductQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
    static createCustomerReview(params: CreateCustomerReviewQueryParams): Promise<APIResponse<IkasCustomerReview | null>>;
    static listCustomerReviews(params: ListCustomerReviewsQueryParams): Promise<APIResponse<{
        data: IkasCustomerReview[];
        count: number;
        hasNext: boolean;
        limit: number;
        page: number;
    } | null>>;
    static listCustomerReviewSummary(params: ListCustomerReviewSummaryQueryParams): Promise<APIResponse<{
        data: IkasCustomerReviewSummary[] | undefined;
        count?: number | undefined;
        hasNext?: boolean | undefined;
        limit?: number | undefined;
        page?: number | undefined;
    }>>;
    static listCustomerAttribute(): Promise<APIResponse<IkasCustomerAttribute[]>>;
    static activateCustomer(params: ActivateCustomerQueryParams): Promise<APIResponse<undefined> | APIResponse<string>>;
    static resendCustomerActivationMail(params: ResendCustomerActivationMailQueryParams): Promise<APIResponse<undefined> | APIResponse<boolean>>;
}
