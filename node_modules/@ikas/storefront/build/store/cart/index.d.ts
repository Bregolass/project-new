import { IkasBaseStore } from "../base";
import { IkasCart, IkasOrderLineItem, IkasProduct, IkasProductVariant } from "../../models/data";
import { APIResponse } from "@ikas/storefront-api";
export declare const CART_LS_KEY = "cartId";
export declare class IkasCartStore {
    cart?: IkasCart | null;
    private baseStore;
    private _isLoadingCart;
    private _isCartLoadFinished;
    constructor(baseStore: IkasBaseStore);
    get isLoadingCart(): boolean;
    get isCartLoadFinished(): boolean;
    get checkoutId(): string | undefined;
    get checkoutUrl(): string | undefined;
    addItem: (variant: IkasProductVariant, product: IkasProduct, initialQuantity?: number) => Promise<IkasCartOperationResult>;
    changeItemQuantity: (item: IkasOrderLineItem, quantity: number) => Promise<IkasCartOperationResult>;
    removeItem: (item: IkasOrderLineItem) => Promise<IkasCartOperationResult>;
    removeCart: () => void;
    waitUntilInitialized: () => Promise<unknown>;
    findExistingItem: (variant: IkasProductVariant, product: IkasProduct) => IkasOrderLineItem | undefined;
    saveCouponCode: (couponCode?: string | null) => Promise<IkasCartOperationResult>;
    removeCouponCode: () => Promise<IkasCartOperationResult>;
    saveCart: (cart: IkasCart) => Promise<IkasCartOperationResult>;
    private removeCardIfEmpty;
    getCart: () => Promise<void>;
    private setCart;
    private beforeCartOperationCheck;
    private createCartLineOptions;
    private getOptionValues;
}
export declare type IkasCartOperationResult = {
    success: boolean;
    validationError?: IkasCartOperationValidationError;
    response?: APIResponse<IkasCart | null>;
};
export declare enum IkasCartOperationValidationError {
    INSUFFICIENT_STOCK = "INSUFFICIENT_STOCK",
    INVALID_PRODUCT_OPTION_VALUES = "INVALID_PRODUCT_OPTION_VALUES",
    EMPTY_CART = "EMPTY_CART"
}
