import { CheckoutStep } from "../components/checkout/model";
import { IkasCheckout, IkasBrand, IkasCategory, IkasOrderLineItem, IkasProduct, IkasThemeJsonPageType } from "../models";
import { IkasCart } from "../models/data/cart";
declare enum StorefrontEventType {
    SESSION_START = 1,
    PAGE_VIEW = 2,
    PRODUCT_VIEW = 3,
    ADD_TO_CART = 4,
    VIEW_CART = 5,
    ORDER_SUCCESS = 6,
    BEGIN_CHECKOUT = 7,
    CHECKOUT_STEP = 8,
    CUSTOMER_REGISTER = 9,
    CUSTOMER_VISIT = 10,
    CUSTOMER_LOGIN = 11,
    BRAND_VIEW = 12,
    CATEGORY_VIEW = 13
}
declare enum StorefrontEventPageType {
    INDEX = 1,
    CATEGORY = 2,
    BRAND = 3,
    PRODUCT = 4,
    CUSTOM = 5,
    ACCOUNT = 6,
    ADDRESSES = 7,
    ORDERS = 8,
    ORDER_DETAIL = 9,
    LOGIN = 10,
    REGISTER = 11,
    FORGOT_PASSWORD = 12,
    RECOVER_PASSWORD = 13,
    CART = 14,
    FAVORITE_PRODUCTS = 15,
    SEARCH = 16,
    NOT_FOUND = 17,
    BLOG = 18,
    BLOG_INDEX = 19,
    BLOG_CATEGORY = 20,
    CHECKOUT = 21,
    ACTIVATE_CUSTOMER = 21
}
interface Event {
    t: StorefrontEventType;
    d: EventPayload;
    ts: number;
}
interface EventPayload {
    u: string;
    r?: string;
    utm?: UTMData;
    pt?: StorefrontEventPageType;
    d?: EventPayloadDetail;
    m?: Record<string, string>;
}
interface UTMData {
    ca?: string;
    c?: string;
    m?: string;
    s?: string;
    t?: string;
}
interface EventPayloadDetail {
    br?: BrandDetail;
    ctg?: CategoryDetail;
    pr?: ProductDetail;
    crt?: CartDetail;
    crtItm?: CartItemDetail;
    chk?: CheckoutDetail;
    cst?: CustomerDetail;
}
interface BrandDetail {
    id: string;
}
interface CategoryDetail {
    id: string;
}
interface ProductDetail {
    id: string;
    vid: string;
}
interface CartDetail {
    id: string;
    c: number;
}
interface CartItemDetail {
    id: string;
    c: number;
}
interface CheckoutDetail {
    id: string;
    s?: string;
}
interface CustomerDetail {
    id?: string;
    e?: string;
    c?: boolean;
}
export default class IkasAnalytics {
    static SESSION_ID_KEY: string;
    static VISITOR_ID_KEY: string;
    static EXPIRY_LENGTH: number;
    static sessionId?: string | null;
    static visitorId?: string | null;
    static createUUID(): Promise<string>;
    static createSessionId(): Promise<void>;
    static checkSessionId(): Promise<void>;
    static checkVisitorId(): Promise<void>;
    static getPageType(pageType: IkasThemeJsonPageType): StorefrontEventPageType | undefined;
    static getCustomerData(): {
        id: string | undefined;
        e: string | undefined;
        c: boolean;
    };
    static getCommonEventData(): {
        u: string;
        r: string;
        pt: StorefrontEventPageType | undefined;
    };
    static sendEvents(events: Event[]): Promise<void>;
    static sessionStart(): Promise<void>;
    static pageView(pageType: IkasThemeJsonPageType): Promise<void>;
    static productView(productDetail: IkasProduct): Promise<void>;
    static addToCart(item: IkasOrderLineItem, quantity: number, cart: IkasCart): Promise<void>;
    static viewCart(cart: IkasCart): Promise<void>;
    static orderSuccess(checkout: IkasCheckout): Promise<void>;
    static beginCheckout(checkout: IkasCheckout): Promise<void>;
    static checkoutStep(checkout: IkasCheckout, step: CheckoutStep): Promise<void>;
    static customerRegister(): Promise<void>;
    static customerLogin(): Promise<void>;
    static customerVisit(): Promise<void>;
    static viewBrand(brand: IkasBrand): Promise<void>;
    static viewCategory(category: IkasCategory): Promise<void>;
}
export {};
