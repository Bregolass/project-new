import { IkasCategory } from "../category";
import { IkasProductVariant } from "./variant";
import { IkasProductAttributeValue } from "./attribute-value";
import { IkasProductVariantType } from "./variant-type";
import { IkasBrand } from "../brand";
import { IkasHTMLMetaData } from "../html-meta-data";
import { IkasProductTag } from "./tag";
import { IkasProduct as IProduct, IkasProductType } from "@ikas/storefront-models";
import { IkasProductOptionSet } from "./option-set";
import { IkasVariantValue } from "../variant-type/variant-value";
import { IkasProductCampaign } from "./campaign";
import { IkasVariantType } from "../variant-type";
import { IkasProductAttributeMap } from "./attribute-value";
import { IkasProductBaseUnit } from "./base-unit";
import { IkasCustomerReviewList } from "../../ui/customer-review-list";
import { IkasProductStar } from "./star";
export declare class IkasProduct implements IProduct {
    id: string;
    name: string;
    type: IkasProductType;
    description: string;
    shortDescription: string;
    metaData: IkasHTMLMetaData | null;
    brand: IkasBrand | null;
    categories: IkasCategory[];
    deleted: boolean | null;
    tags: IkasProductTag[] | null;
    variants: IkasProductVariant[];
    attributes: IkasProductAttributeValue[];
    variantTypes: IkasProductVariantType[];
    productOptionSetId: string | null;
    baseUnit: IkasProductBaseUnit | null;
    averageRating: number | null;
    reviewCount: number | null;
    stars: IkasProductStar[] | null;
    groupVariantsByVariantTypeId: string | null;
    productOptionSet?: IkasProductOptionSet | null;
    campaigns?: IkasProductCampaign[] | null;
    selectedVariantValues: IkasVariantValue[];
    isFiltered: boolean;
    isStatic: boolean;
    constructor(data?: Partial<IkasProduct>);
    get hasVariant(): boolean;
    get hasStock(): boolean;
    get hasValidProductOptionValues(): boolean;
    get href(): string;
    get productHref(): string;
    get mainVariantType(): IkasVariantType | undefined;
    get mainVariantValue(): IkasVariantValue | undefined;
    get selectedVariant(): IkasProductVariant;
    get displayedVariantTypes(): IkasDisplayedVariantType[];
    get isCustomerReviewEnabled(): boolean;
    get isCustomerReviewLoginRequired(): boolean;
    get isAddToCartEnabled(): boolean;
    get groupedAttributeValues(): IkasProductAttributeMap[];
    get selectedVariantUnitPriceText(): string | undefined;
    selectVariantValue: (variantValue: IkasVariantValue, disableRoute?: boolean) => void;
    getVariantUnitPriceText: (variant: IkasProductVariant) => string | undefined;
    getCampaigns: () => Promise<IkasProductCampaign[] | undefined>;
    getAvailableStockLocations: () => Promise<import("./stock-location").IkasProductStockLocations[]>;
    getCustomerReviews: (params?: {
        limit?: number;
        page?: number;
    }) => Promise<IkasCustomerReviewList>;
    getProductOptionSet: () => Promise<boolean>;
    private setOptionPrices;
}
export { IkasProductType };
export declare type IkasDisplayedVariantValue = {
    variant: IkasProductVariant;
    variantValue: IkasVariantValue;
    hasStock: boolean;
    isSelected: boolean;
};
export declare type IkasDisplayedVariantType = {
    variantType: IkasVariantType;
    displayedVariantValues: IkasDisplayedVariantValue[];
};
