import { IkasImage } from "../../image";
import { IkasProductFilterDisplayType, IkasProductFilterSortType, IkasProductFilterType, IkasProductStockFilterValue, IkasProductFilter as IProductFilter, IkasApplicableProductFilterValue as IApplicableProductFilterValue, IkasProductFilterValue as IProductFilterValue, IkasProductFilterSettings as IProductFilterSettings, IkasFilterRangeValue as IFilterRangeValue, IkasProductFilterNumberRangeListOption as IProductFilterNumberRangeListOption } from "@ikas/storefront-models";
import { IkasProductFilterFunctions } from "@ikas/storefront-model-functions";
import { IkasProductList } from "../../../ui/product-list";
export declare class IkasProductFilter implements IProductFilter {
    id: string;
    key: string;
    name: string;
    order: number;
    type: IkasProductFilterType;
    displayType: IkasProductFilterDisplayType;
    isMultiSelect: boolean;
    isFacetFilter: boolean | null;
    values?: IkasApplicableProductFilterValue[] | null;
    customValues?: string[] | null;
    settings?: IkasProductFilterSettings | null;
    private productList?;
    numberRange?: IkasFilterRangeValue | null;
    numberRangeLimit?: IkasFilterRangeValue | null;
    numberRangeListOptions?: IkasProductFilterNumberRangeListOption[] | null;
    constructor(data: IProductFilter, productList?: IkasProductList | null);
    get isCustomValueFilter(): boolean;
    get isStockFilter(): boolean;
    get valueList(): string[];
    get keyList(): string[];
    get displayedValues(): IkasApplicableProductFilterValue[];
    onFilterValueClick: (filterValue: IkasApplicableProductFilterValue) => void;
    onNumberRangeClick: (option: IkasProductFilterNumberRangeListOption) => void;
    onNumberRangeChange: (numberRange: IkasFilterRangeValue | null) => void;
    clear: () => void;
    toInput: () => IkasProductFilterFunctions.IkasSearchInputFilterListInput;
    toJSON(): this;
    applyQueryParam: (value: string) => void;
}
export declare class IkasApplicableProductFilterValue implements IApplicableProductFilterValue {
    id: string;
    key: string;
    name: string;
    colorCode?: string | null;
    thumbnailImageId?: string | null;
    thumbnailImage?: IkasImage | null;
    resultCount?: number | null;
    isSelected: boolean;
    constructor(data: IApplicableProductFilterValue);
}
export declare class IkasProductFilterValue implements IProductFilterValue {
    id: string;
    type: IkasProductFilterType;
    displayType: IkasProductFilterDisplayType;
    valueList: string[];
    constructor(data: IProductFilterValue);
}
export declare class IkasProductFilterSettings implements IProductFilterSettings {
    useAndFilter?: boolean | null;
    showCollapsedOnDesktop: boolean;
    showCollapsedOnMobile: boolean;
    sortType: IkasProductFilterSortType;
    customSortedValues: string[] | null;
    constructor(data: Partial<IkasProductFilterSettings>);
}
export declare type IkasProductFacetInput = {
    id: string;
    type: IkasProductFilterType;
    displayType: IkasProductFilterDisplayType;
};
export declare class IkasFilterRangeValue implements IFilterRangeValue {
    from: number;
    to: number | undefined | null;
    constructor(data: Partial<IFilterRangeValue>);
}
export declare class IkasProductFilterNumberRangeListOption implements IProductFilterNumberRangeListOption {
    from: number;
    to: number | undefined | null;
    key: string;
    isSelected: boolean;
    constructor(data: Partial<IProductFilterNumberRangeListOption>);
    toJSON(): this & {
        isSelected: boolean;
    };
}
export { IkasProductFilterDisplayType, IkasProductFilterSortType, IkasProductFilterType, IkasProductStockFilterValue, };
export declare function parseRangeStr(rangeStr: string): IFilterRangeValue;
