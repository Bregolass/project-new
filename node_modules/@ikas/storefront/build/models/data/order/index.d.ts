import { IkasOrderAddress } from "./address";
import { IkasOrderShippingLine } from "./shipping-line";
import { IkasOrderLineItem } from "./line-item";
import { IkasOrderRefundSettings } from "./refund/settings";
import { IkasOrderCustomer } from "./customer";
import { IkasOrderGiftPackageLine } from "./gift-line";
import { IkasInvoice } from "./invoice";
import { IkasOrderPaymentMethod } from "./payment-method";
import { IkasOrderAdjustment } from "./adjustment";
import { IkasOrderPackage } from "./package";
import { IkasOrderTaxLine } from "./tax-line";
import { IkasBaseModel } from "../base";
import { IkasOrderCancelReason, IkasOrderPackageStatus, IkasOrderPaymentStatus, IkasOrderShippingMethod, IkasOrderStatus } from "@ikas/storefront-models";
import { IkasOrder as IOrder } from "@ikas/storefront-models";
declare type IOrderConstructorData = {
    refundSettings?: IkasOrderRefundSettings | null;
} & IOrder;
export declare class IkasOrder extends IkasBaseModel implements IOrder {
    billingAddress: IkasOrderAddress | null;
    cancelReason: IkasOrderCancelReason | null;
    cancelledAt: number | null;
    currencyCode: string;
    currencySymbol: string | null;
    customer: IkasOrderCustomer | null;
    customerId: string | null;
    giftPackageLines: IkasOrderGiftPackageLine[] | null;
    giftPackageNote: string | null;
    invoices: IkasInvoice[] | null;
    isGiftPackage: boolean | null;
    note: string | null;
    orderAdjustments: IkasOrderAdjustment[] | null;
    orderLineItems: IkasOrderLineItem[];
    orderNumber: string | null;
    orderPackageStatus: IkasOrderPackageStatus | null;
    orderPackages: IkasOrderPackage[] | null;
    orderPaymentStatus: IkasOrderPaymentStatus | null;
    orderedAt: number | null;
    paymentMethods: IkasOrderPaymentMethod[] | null;
    shippingAddress: IkasOrderAddress | null;
    shippingLines: IkasOrderShippingLine[] | null;
    shippingMethod: IkasOrderShippingMethod;
    status: IkasOrderStatus;
    taxLines: IkasOrderTaxLine[] | null;
    totalFinalPrice: number;
    totalPrice: number;
    refundSettings?: IkasOrderRefundSettings | null;
    constructor(data: Partial<IOrderConstructorData>, removeObservableAddresses?: boolean);
    get items(): IkasOrderLineItem[];
    get itemCount(): number;
    get itemQuantity(): number;
    get refundableItems(): IkasOrderLineItem[];
    get displayedPackages(): IkasOrderPackage[];
    get unfullfilledItems(): IkasOrderLineItem[];
    get refundedItems(): IkasOrderLineItem[];
    get totalTax(): number;
    get formattedTotalTax(): string;
    get shippingTotal(): number;
    get formattedShippingTotal(): string;
    get formattedTotalFinalPrice(): string;
    get formattedTotalPrice(): string;
    get hasCustomer(): boolean;
    get hasValidCustomerEmail(): boolean;
    get customerFullName(): string;
    get formattedDate(): string;
    get couponAdjustment(): IkasOrderAdjustment;
    get nonCouponAdjustments(): IkasOrderAdjustment[];
    get isRefundEnabled(): boolean;
    get displayedOrderAdjustments(): IkasOrderAdjustment[] | undefined;
}
export { IkasOrderCancelReason, IkasOrderPackageStatus, IkasOrderPaymentStatus, IkasOrderShippingMethod, IkasOrderStatus, };
