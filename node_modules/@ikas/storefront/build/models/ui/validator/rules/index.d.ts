export declare enum ValidatorErrorType {
    "REQUIRED_RULE" = "REQUIRED_RULE",
    "EMAIl_RULE" = "EMAIl_RULE",
    "MIN_RULE" = "MIN_RULE"
}
declare type ValueGetter<T> = (model: T) => any;
declare type ValuePath<T> = string | ValueGetter<T>;
export interface IValidationRuleParams<T = any> {
    model?: T;
    fieldKey: string;
    fieldName?: string;
    message?: ((model: T) => string) | string;
    errorType?: ValidatorErrorType;
    valuePath: ValuePath<T>;
    onValueChange?: (rule: ValidationRule) => void;
}
export declare abstract class ValidationRule<T = any> {
    model?: T;
    fieldKey: string;
    fieldName?: string;
    message?: ((model: T) => string) | string;
    errorType?: ValidatorErrorType;
    valuePath: ValuePath<T>;
    onValueChange?: (rule: ValidationRule) => void;
    disposer?: () => void;
    constructor(data: IValidationRuleParams<T>);
    get value(): any;
    protected getValue(valuePath: ValuePath<T>): any;
    abstract run(): Promise<boolean>;
    abstract get errorMessage(): string;
}
export interface IMinRuleParams<T> extends IValidationRuleParams<T> {
    minValue: number;
}
export declare class MinRule<T> extends ValidationRule<T> {
    minValue: number;
    errorType: ValidatorErrorType;
    constructor(data: IMinRuleParams<T>);
    get errorMessage(): string;
    run(): Promise<boolean>;
}
export interface IMaxRuleParams extends IValidationRuleParams {
    maxValue: number;
}
export declare class MaxRule<T> extends ValidationRule<T> {
    maxValue: number;
    constructor(data: IMaxRuleParams);
    get errorMessage(): string;
    run(): Promise<boolean>;
}
export declare class RequiredRule<T> extends ValidationRule<T> {
    constructor(data: IValidationRuleParams<T>);
    get errorMessage(): string;
    run(): Promise<boolean>;
}
interface ILessThanRuleParams<T> extends IValidationRuleParams<T> {
    otherFieldValuePath: ValuePath<T>;
    otherFieldName?: string;
}
export declare class LessThanRule<T> extends ValidationRule<T> {
    otherFieldName?: string;
    otherFieldValuePath: ValuePath<T>;
    constructor(data: ILessThanRuleParams<T>);
    get otherValue(): any;
    get errorMessage(): string;
    run(): Promise<boolean>;
}
export declare class EmailRule<T> extends ValidationRule<T> {
    errorType: ValidatorErrorType;
    get errorMessage(): string;
    run(): Promise<boolean>;
}
/**
 * 1) start with plus(+) or digit
 * 2) any digit or one char white space
 * 3) end with digit
 *
 * For example:
 * âœ… Valid +90535 555 5555
 * âœ… valid 905355555555
 * ðŸš« Unvalid +90535 5  55 5555
 */
export declare class PhoneRule<T> extends ValidationRule<T> {
    get errorMessage(): string;
    run(): Promise<boolean>;
}
export interface IEqualsRuleParams<T> extends IValidationRuleParams<T> {
    equalsValuePath: ValuePath<T>;
}
export declare class EqualsRule<T> extends ValidationRule<T> {
    equalsValuePath: ValuePath<T>;
    constructor(data: IEqualsRuleParams<T>);
    get equalsValue(): any;
    get errorMessage(): string;
    run(): Promise<boolean>;
}
export declare class IdentityNumberRule<T> extends ValidationRule<T> {
    get errorMessage(): string;
    run(): Promise<boolean>;
}
export {};
