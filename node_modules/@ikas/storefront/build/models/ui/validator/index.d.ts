import { ValidatorErrorType, ValidationRule } from "./rules";
export declare type ValidationResults = {
    [fieldKey: string]: ValidationResult;
};
export declare type ValidationStatus = "success" | "warning" | "error" | "validating";
export declare class Validator<T = any> {
    model: T;
    rules: ValidationRule[];
    results: ValidationResults;
    constructor(model: T, rules: ValidationRule[]);
    get hasError(): boolean;
    onValueChange: (validationRule: ValidationRule) => void;
    setRules(rules: ValidationRule[]): void;
    validateAll(): Promise<boolean>;
    validateFieldRules(fieldKey: string): Promise<void>;
    private runRules;
}
declare class ValidationResult {
    fieldKey: string;
    status?: ValidationStatus;
    messages: string[];
    errorTypes: ValidatorErrorType[];
    constructor(fieldKey: string, status?: ValidationStatus, messages?: string[], errorTypes?: ValidatorErrorType[]);
    get errorMessage(): string | undefined;
    get errorType(): ValidatorErrorType | undefined;
}
export {};
