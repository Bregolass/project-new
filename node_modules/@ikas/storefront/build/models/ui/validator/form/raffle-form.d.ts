import { GraphQLError } from "graphql";
import { IkasRaffle } from "../../../data";
declare type RaffleFormProps<T> = {
    message: {
        requiredRule: ((model: T) => string) | string;
        emailRule: ((model: T) => string) | string;
        phoneRule?: ((model: T) => string) | string;
        birthdayRule?: ((model: T) => string) | string;
        identityNumberRule?: ((model: T) => string) | string;
    };
    raffle: IkasRaffle;
};
declare type RaffleFormModel = {
    firstName: string;
    lastName: string;
    email: string;
    extraData: {
        birthYear: number | null;
        identityNumber: number | null;
    };
    phone: string;
};
export declare class RaffleForm {
    private model;
    private validator;
    private raffle;
    constructor(props: RaffleFormProps<RaffleFormModel>);
    get firstName(): string;
    set firstName(value: string);
    get lastName(): string;
    set lastName(value: string);
    get email(): string;
    set email(value: string);
    get birthYear(): number | null;
    set birthYear(value: number | null);
    get identityNumber(): number | null;
    set identityNumber(value: number | null);
    get phone(): string;
    set phone(value: string);
    get firstNameErrorMessage(): string | undefined;
    get lastNameErrorMessage(): string | undefined;
    get emailErrorMessage(): string | undefined;
    get birthYearErrorMessage(): string | undefined;
    get identityNumberErrorMessage(): string | undefined;
    get phoneErrorMessage(): string | undefined;
    get redirect(): string | null | undefined;
    onFirstNameChange: (value: string) => void;
    onLastNameChange: (value: string) => void;
    onEmailChange: (value: string) => void;
    onBirthYearChange: (value: number) => void;
    onIdentityNumberChange: (value: number) => void;
    onPhoneChange: (value: string) => void;
    get hasValidatorError(): boolean;
    get results(): import("..").ValidationResults;
    validateAll(): Promise<boolean>;
    submit(): Promise<{
        isFormError: boolean;
        isSuccess: boolean;
        errors?: readonly GraphQLError[] | undefined;
    }>;
}
export {};
