import { PhoneRule, RequiredRule } from "../rules";
import { IkasCity, IkasCountry, IkasCustomerAddress, IkasDistrict, IkasState } from "../../../data";
declare type AddressFormPropsValidatorMessage<T> = {
    requiredRule: ((model: T) => string) | string;
    phoneRule?: ((model: T) => string) | string;
};
declare type AddressFormProps<T> = {
    message: AddressFormPropsValidatorMessage<T>;
    address?: IkasCustomerAddress;
};
export declare class AddressForm {
    address: IkasCustomerAddress;
    countries: IkasCountry[];
    states: IkasState[];
    cities: IkasCity[];
    districts: IkasDistrict[];
    private _isCountriesPending;
    private _isStatesPending;
    private _isCitiesPending;
    private _isDistrictsPending;
    private validator;
    private message;
    constructor(props: AddressFormProps<IkasCustomerAddress>);
    validatorRules: (includePhoneRule?: boolean) => (RequiredRule<IkasCustomerAddress> | PhoneRule<IkasCustomerAddress>)[];
    onTitleChange: (value: string) => void;
    onFirstNameChange: (value: string) => void;
    onLastNameChange: (value: string) => void;
    onPhoneChange: (value: string) => void;
    onAddressLine1Change: (value: string) => void;
    onAddressLine2Change: (value: string) => void;
    onAddressPostalCodeChange: (value: string) => void;
    onCountryChange: (countryId: string) => void;
    onStateChange: (stateId: string) => void;
    onCityChange: (cityId: string) => void;
    onCityInputChange: (value: string) => void;
    onDistrictChange: (districtId: string) => void;
    onDistrictInputChange: (value: string) => void;
    listCountries: () => Promise<void>;
    listStates: () => Promise<void>;
    listCities: () => Promise<void>;
    listDistricts: () => Promise<void>;
    get isFreeTextCity(): boolean;
    get isFreeTextDistrict(): boolean;
    get isEdit(): boolean;
    private get editingAddressIndex();
    get countryOptions(): {
        label: string;
        value: string;
    }[];
    get stateOptions(): {
        label: string;
        value: string;
    }[];
    get cityOptions(): {
        label: string;
        value: string;
    }[];
    get districtOptions(): {
        label: string;
        value: string;
    }[];
    get hasState(): boolean;
    get isCountriesPending(): boolean;
    get isStatesPending(): boolean;
    get isCitiesPending(): boolean;
    get isDistrictsPending(): boolean;
    get hasValidatorError(): boolean;
    get results(): import("..").ValidationResults;
    validateAll: () => Promise<boolean>;
    submit: () => Promise<{
        isFormError: boolean;
        isSuccess: boolean;
    }>;
}
export {};
