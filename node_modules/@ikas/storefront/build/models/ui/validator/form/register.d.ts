import { EmailRule, MinRule, PhoneRule, RequiredRule } from "../rules";
import { IkasCustomerAttribute, IkasCustomerAttributeValue } from "../../../data";
declare type RegisterFormPropsValidatorMessage<T> = {
    requiredRule: ((model: T) => string) | string;
    emailRule: ((model: T) => string) | string;
    minRule: ((model: T) => string) | string;
    phoneRule?: ((model: T) => string) | string;
};
declare type RegisterFormProps<T> = {
    message: RegisterFormPropsValidatorMessage<T>;
};
declare type RegisterFormModel = {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    attributes?: IkasCustomerAttributeValue[];
    isMarketingAccepted?: boolean;
    phone?: string | null;
};
declare type AttributeValue = {
    isChecked?: boolean;
    value?: string;
    selectedIdList?: string[];
};
export declare type RegisterFormCustomerAttribute = {
    attribute: IkasCustomerAttribute;
    attributeValue: AttributeValue;
    validator: {
        isRequired: boolean | undefined;
        hasError: boolean | undefined;
        message: string | undefined;
    };
};
export declare class RegisterForm {
    private model;
    private validator;
    private message;
    private isFormSubmit;
    private _customerAttributes;
    constructor(props: RegisterFormProps<RegisterFormModel>);
    validatorRules: (includePhoneRule?: boolean) => (RequiredRule<RegisterFormModel> | EmailRule<RegisterFormModel> | MinRule<RegisterFormModel> | PhoneRule<RegisterFormModel>)[];
    get firstName(): string;
    set firstName(value: string);
    get lastName(): string;
    set lastName(value: string);
    get email(): string;
    set email(value: string);
    get password(): string;
    set password(value: string);
    get isMarketingAccepted(): boolean | undefined;
    set isMarketingAccepted(value: boolean | undefined);
    get phone(): string | null | undefined;
    set phone(value: string | null | undefined);
    get hasError(): boolean;
    get firstNameErrorMessage(): string | undefined;
    get lastNameErrorMessage(): string | undefined;
    get emailErrorMessage(): string | undefined;
    get passwordErrorMessage(): string | undefined;
    get phoneErrorMessage(): string | undefined;
    get attributes(): IkasCustomerAttributeValue[] | undefined;
    set attributes(attributes: IkasCustomerAttributeValue[] | undefined);
    get redirect(): string | null | undefined;
    get customerAttributes(): RegisterFormCustomerAttribute[] | undefined;
    onFirstNameChange: (value: string) => void;
    onLastNameChange: (value: string) => void;
    onEmailChange: (value: string) => void;
    onPasswordChange: (value: string) => void;
    onPhoneChange: (value: string) => void;
    setCustomerAttributes: (customerAttributes: IkasCustomerAttribute[]) => void;
    private getAttributeValue;
    onAttributeChange: (attributeId: string, value: boolean | string | string[]) => void;
    private get formattedAttributesInput();
    private validateCustomerAttribute;
    validateAll(): Promise<boolean | undefined>;
    register(): Promise<{
        isSuccess: boolean;
        errorCodes: import("@ikas/storefront-api").IkasRegisterError[];
        isFormError: boolean;
    }>;
}
export {};
