declare type ContactFormProps<T> = {
    message: {
        requiredRule: ((model: T) => string) | string;
        emailRule: ((model: T) => string) | string;
        minRule: ((model: T) => string) | string;
        phoneRule?: ((model: T) => string) | string;
    };
};
declare type ContactFormModel = {
    firstName: string;
    lastName: string;
    email: string;
    phone?: string | null;
    message: string;
};
export declare class ContactForm {
    private model;
    private validator;
    constructor(props: ContactFormProps<ContactFormModel>);
    get firstName(): string;
    set firstName(value: string);
    get lastName(): string;
    set lastName(value: string);
    get email(): string;
    set email(value: string);
    get phone(): string | null | undefined;
    set phone(value: string | null | undefined);
    get message(): string;
    set message(value: string);
    get hasError(): boolean;
    get firstNameErrorMessage(): string | undefined;
    get lastNameErrorMessage(): string | undefined;
    get emailErrorMessage(): string | undefined;
    get phoneErrorMessage(): string | undefined;
    get messageErrorMessage(): string | undefined;
    get redirect(): string | null | undefined;
    onFirstNameChange: (value: string) => void;
    onLastNameChange: (value: string) => void;
    onEmailChange: (value: string) => void;
    onPhoneChange: (value: string) => void;
    onMessageChange: (value: string) => void;
    validateAll(): Promise<boolean>;
    saveContactForm(): Promise<{
        isFormError: boolean;
        isSuccess: boolean;
    }>;
}
export {};
