import { IkasCity, IkasCountry, IkasDistrict, IkasLocalizedCustomerAddress, IkasState } from "../../../data";
import { AddressFormItem } from "@ikas/localized-address";
declare type IkasAddressFormPropsValidatorMessage<T> = {
    requiredRule: ((model: T) => string) | string;
    invalidRule: ((model: T) => string) | string;
    phoneRule?: ((model: T) => string) | string;
};
declare type IkasAddressFormProps<T> = {
    message: IkasAddressFormPropsValidatorMessage<T>;
    address?: IkasLocalizedCustomerAddress;
};
export declare class IkasAddressForm {
    address: IkasLocalizedCustomerAddress;
    countries: IkasCountry[];
    states: IkasState[];
    cities: IkasCity[];
    districts: IkasDistrict[];
    isLoaded: boolean;
    private isFormSubmit;
    private _isCountriesPending;
    private _isStatesPending;
    private _isCitiesPending;
    private _isDistrictsPending;
    private message;
    constructor(props: IkasAddressFormProps<IkasLocalizedCustomerAddress>);
    init: () => Promise<void>;
    onTitleChange: (value: string) => void;
    onFirstNameChange: (value: string) => void;
    onLastNameChange: (value: string) => void;
    onIdentityNumberChange: (value: string) => void;
    onPhoneChange: (value: string) => void;
    onAddressLine1Change: (value: string) => void;
    onAddressLine2Change: (value: string) => void;
    onAddressPostalCodeChange: (value: string) => void;
    onCountryChange: (countryId: string) => void;
    onStateChange: (stateId: string) => void;
    onCityChange: (cityId: string) => void;
    onCityInputChange: (value: string) => void;
    onDistrictChange: (districtId: string) => void;
    onDistrictInputChange: (value: string) => void;
    listCountries: () => Promise<void>;
    listStates: () => Promise<void>;
    listCities: () => Promise<void>;
    listDistricts: () => Promise<void>;
    get isFreeTextCity(): boolean | undefined;
    get isFreeTextDistrict(): boolean | undefined;
    get isEdit(): boolean;
    private get editingAddressIndex();
    get countryOptions(): {
        label: string;
        value: string;
    }[];
    get stateOptions(): {
        label: string;
        value: string;
    }[];
    get cityOptions(): {
        label: string;
        value: string;
    }[];
    get districtOptions(): {
        label: string;
        value: string;
    }[];
    get hasState(): boolean;
    get isCountriesPending(): boolean;
    get isStatesPending(): boolean;
    get isCitiesPending(): boolean;
    get isDistrictsPending(): boolean;
    get fieldSettings(): {
        firstName: import("@ikas/localized-address").AddressFormField;
        lastName: import("@ikas/localized-address").AddressFormField;
        identityNumber: import("@ikas/localized-address").AddressFormField;
        addressLine1: import("@ikas/localized-address").AddressFormField;
        addressLine2: import("@ikas/localized-address").AddressFormField;
        postalCode: import("@ikas/localized-address").AddressFormField;
        country: import("@ikas/localized-address").AddressFormField;
        state: import("@ikas/localized-address").AddressFormField;
        city: import("@ikas/localized-address").AddressFormField;
        district: import("@ikas/localized-address").AddressFormField;
        phone: import("@ikas/localized-address").AddressFormField;
        company: import("@ikas/localized-address").AddressFormField;
        taxOffice: import("@ikas/localized-address").AddressFormField;
        taxNumber: import("@ikas/localized-address").AddressFormField;
        title: import("@ikas/localized-address").AddressFormField;
    } | undefined;
    get fieldLabels(): import("@ikas/localized-address").IkasAddressFormLabels | undefined;
    get addressFormat(): AddressFormItem[][] | undefined;
    get validationResult(): {
        firstName: {
            hasError: boolean;
            message: string;
        };
        lastName: {
            hasError: boolean;
            message: string;
        };
        identityNumber: {
            hasError: boolean;
            message: string;
        };
        addressLine1: {
            hasError: boolean;
            message: string;
        };
        addressLine2: {
            hasError: boolean;
            message: string;
        };
        postalCode: {
            hasError: boolean;
            message: string;
        };
        country: {
            hasError: boolean;
            message: string;
        };
        state: {
            hasError: boolean;
            message: string;
        };
        city: {
            hasError: boolean;
            message: string;
        };
        district: {
            hasError: boolean;
            message: string;
        };
        phone: {
            hasError: boolean;
            message: string;
        };
        company: {
            hasError: boolean;
            message: string;
        };
        taxOffice: {
            hasError: boolean;
            message: string;
        };
        taxNumber: {
            hasError: boolean;
            message: string;
        };
        title: {
            hasError: boolean;
            message: string;
        };
    } | undefined;
    submit: () => Promise<{
        isFormError: boolean;
        isSuccess: boolean;
    }>;
}
export {};
