import { NextRouter } from "next/router.js";
import { IkasBrand, IkasProduct, IkasProductFilter, IkasFilterCategory, IkasThemeJsonPageType, IkasCategory } from "../../../models/data";
import { IkasProductListPropValue, IkasRelatedProductProps, IkasViewedTogetherProductProps } from "@ikas/storefront-providers";
export declare class IkasProductList {
    data: IkasProduct[];
    filters?: IkasProductFilter[] | null;
    private _filterCategories?;
    private _type;
    private _pageType;
    private _sort;
    private _limit;
    private _page;
    private _infiniteScrollPage;
    private _count;
    private _searchKeyword;
    private _initialized;
    private _minPage?;
    private _productListPropValue;
    private _filterBrandId?;
    private _filterCategoryId?;
    private _relatedProductData?;
    private _viewedTogetherProductData?;
    private pageSpecificData?;
    private _recommendFor?;
    private _isLoading;
    private _fetchRequestTime;
    private router?;
    constructor(data: IkasProductListParams | IkasProductList, router?: NextRouter);
    get sort(): IkasProductListSortType;
    get limit(): number;
    get pageType(): IkasThemeJsonPageType;
    get page(): number;
    get minPage(): number;
    get count(): number;
    get pageCount(): number;
    get searchKeyword(): string;
    set searchKeyword(value: string);
    get isInitialized(): boolean;
    get isFilterable(): boolean;
    get isFiltered(): boolean | undefined;
    get isStatic(): boolean;
    get isDiscounted(): boolean;
    get isRecommended(): boolean;
    get isLastViewed(): boolean;
    get isRelatedProducts(): boolean;
    get isViewedTogetherProducts(): boolean;
    get isSearch(): boolean;
    get hasPrev(): boolean;
    get hasNext(): boolean;
    get isLoading(): boolean;
    get queryParams(): string;
    get filterCategories(): IkasFilterCategory[] | undefined;
    get hasAppliedfilter(): boolean | undefined;
    get isFeaturedSortEnabled(): boolean;
    private setIsFilteredForProducts;
    private setIsStaticForProducts;
    private setPageSpecificSort;
    private getSortParams;
    private searchProducts;
    private getFilters;
    private applyQueryParamFilters;
    private applyFacets;
    private applyFilters;
    private setQueryParams;
    clearFilters(): void;
    private getInitial;
    getPrev: () => Promise<void>;
    getNext: () => Promise<void>;
    getPage: (page: number) => Promise<void>;
    setSortType(sortType: IkasProductListSortType): Promise<void>;
    onFilterCategoryClick(filterCategory: IkasFilterCategory, disableRoute?: boolean): Promise<void>;
    toJSON(): {
        data: IkasProduct[];
        type: IkasProductListType;
        pageType: IkasThemeJsonPageType;
        sort: IkasProductListSortType;
        limit: number;
        page: number;
        count: number;
        searchKeyword: string;
        initialized: boolean;
        minPage: number | null | undefined;
        filterBrandId: string | null | undefined;
        filterCategoryId: string | null | undefined;
        filterCategories: IkasFilterCategory[] | null | undefined;
        filters: IkasProductFilter[] | null | undefined;
        recommendFor: string | null | undefined;
        productListPropValue: IkasProductListPropValue;
        pageSpecificData: IkasCategory | IkasBrand | null | undefined;
    };
    setVisibleInfiniteScrollPage: (page: number) => void;
    private restoreInfiniteScrollPage;
    private getQueryParams;
    private isBrowser;
    private waitForCustomerStoreInit;
    private handleListingEvent;
    private searchDebouncer;
    private searchAnalyticsDebouncer;
}
export declare type IkasProductListParams = {
    data?: IkasProduct[];
    type?: IkasProductListType;
    pageType: IkasThemeJsonPageType;
    sort?: IkasProductListSortType;
    limit?: number;
    page?: number;
    count?: number;
    searchKeyword?: string;
    initialized?: boolean;
    minPage?: number;
    filterBrandId?: string;
    filterCategoryId?: string;
    filters?: IkasProductFilter[];
    filterCategories?: IkasFilterCategory[];
    recommendFor?: string;
    productListPropValue: IkasProductListPropValue;
    pageSpecificData?: IkasCategory | IkasBrand | null;
    relatedProductData?: IkasRelatedProductProps | null;
    viewedTogetherProductData?: IkasViewedTogetherProductProps | null;
};
export declare enum IkasProductListType {
    ALL = "ALL",
    STATIC = "STATIC",
    DISCOUNTED = "DISCOUNTED",
    RECOMMENDED = "RECOMMENDED",
    CATEGORY = "CATEGORY",
    SEARCH = "SEARCH",
    LAST_VIEWED = "LAST_VIEWED",
    RELATED_PRODUCTS = "RELATED_PRODUCTS",
    VIEWED_TOGETHER = "VIEWED_TOGETHER"
}
export declare enum IkasProductListSortType {
    INCREASING_PRICE = "INCREASING_PRICE",
    DECREASING_PRICE = "DECREASING_PRICE",
    LAST_ADDED = "LAST_ADDED",
    FIRST_ADDED = "FIRST_ADDED",
    INCREASING_DISCOUNT = "INCREASING_DISCOUNT",
    DECRASING_DISCOUNT = "DECRASING_DISCOUNT",
    FEATURED = "FEATURED",
    DEFAULT = "DEFAULT"
}
export declare enum IkasRelatedProductsType {
    CATEGORY = "CATEGORY",
    BRAND = "BRAND"
}
