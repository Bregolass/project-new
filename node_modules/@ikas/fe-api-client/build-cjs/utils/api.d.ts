import { GraphQLError } from "graphql";
export default interface API<T> {
    list?: (params?: any) => Promise<APIResponse<any>>;
    save?: (model: T) => Promise<APIResponse<any>>;
    saveBulk?: (models: T[]) => Promise<APIResponse<any>>;
    delete?: (idList: string[]) => Promise<APIResponse<any>>;
}
export declare enum APIErrorCode {
    ARGUMENT_VALIDATION_ERROR = "ARGUMENT_VALIDATION_ERROR",
    UNAUTHENTICATED = "UNAUTHENTICATED",
    UNAUTHORIZED = "UNAUTHORIZED",
    INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
    LOGIN_REQUIRED = "LOGIN_REQUIRED",
    NETWORK_ERROR = "NETWORK_ERROR",
    DUPLICATE_KEY_ERROR = "DUPLICATE_KEY_ERROR",
    UNKNOWN = "UNKNOWN"
}
export declare class APIResponse<T> {
    data?: T;
    errors: string[];
    errorCodes: APIErrorCode[];
    graphQLErrors?: readonly GraphQLError[];
    constructor(data?: T, errors?: readonly GraphQLError[]);
    get firstErrorMessage(): string;
    get isUnAuthenticated(): boolean;
    get isNetworkError(): boolean;
    get isSuccess(): boolean;
    get isRecoverableError(): boolean;
    static networkError(): APIResponse<undefined>;
    static unknownError(): APIResponse<undefined>;
    static authError(): APIResponse<undefined>;
    static success(): APIResponse<unknown>;
}
export declare function handleAPIError(err: any): APIResponse<undefined>;
